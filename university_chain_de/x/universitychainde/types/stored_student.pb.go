// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: universitychainde/stored_student.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StoredStudent struct {
	Index          string               `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	StudentData    *StudentInfo         `protobuf:"bytes,2,opt,name=studentData,proto3" json:"studentData,omitempty"`
	TranscriptData *TranscriptOfRecords `protobuf:"bytes,3,opt,name=transcriptData,proto3" json:"transcriptData,omitempty"`
	PersonalData   *PersonalInfo        `protobuf:"bytes,4,opt,name=personalData,proto3" json:"personalData,omitempty"`
	ResidenceData  *ResidenceInfo       `protobuf:"bytes,5,opt,name=residenceData,proto3" json:"residenceData,omitempty"`
	ContactData    *ContactInfo         `protobuf:"bytes,6,opt,name=contactData,proto3" json:"contactData,omitempty"`
	TaxesData      *TaxesInfo           `protobuf:"bytes,7,opt,name=taxesData,proto3" json:"taxesData,omitempty"`
	ErasmusData    *ErasmusInfo         `protobuf:"bytes,8,opt,name=erasmusData,proto3" json:"erasmusData,omitempty"`
}

func (m *StoredStudent) Reset()         { *m = StoredStudent{} }
func (m *StoredStudent) String() string { return proto.CompactTextString(m) }
func (*StoredStudent) ProtoMessage()    {}
func (*StoredStudent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef580c1c58256862, []int{0}
}
func (m *StoredStudent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredStudent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoredStudent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoredStudent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredStudent.Merge(m, src)
}
func (m *StoredStudent) XXX_Size() int {
	return m.Size()
}
func (m *StoredStudent) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredStudent.DiscardUnknown(m)
}

var xxx_messageInfo_StoredStudent proto.InternalMessageInfo

func (m *StoredStudent) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *StoredStudent) GetStudentData() *StudentInfo {
	if m != nil {
		return m.StudentData
	}
	return nil
}

func (m *StoredStudent) GetTranscriptData() *TranscriptOfRecords {
	if m != nil {
		return m.TranscriptData
	}
	return nil
}

func (m *StoredStudent) GetPersonalData() *PersonalInfo {
	if m != nil {
		return m.PersonalData
	}
	return nil
}

func (m *StoredStudent) GetResidenceData() *ResidenceInfo {
	if m != nil {
		return m.ResidenceData
	}
	return nil
}

func (m *StoredStudent) GetContactData() *ContactInfo {
	if m != nil {
		return m.ContactData
	}
	return nil
}

func (m *StoredStudent) GetTaxesData() *TaxesInfo {
	if m != nil {
		return m.TaxesData
	}
	return nil
}

func (m *StoredStudent) GetErasmusData() *ErasmusInfo {
	if m != nil {
		return m.ErasmusData
	}
	return nil
}

func init() {
	proto.RegisterType((*StoredStudent)(nil), "university_chain_de.universitychainde.StoredStudent")
}

func init() {
	proto.RegisterFile("universitychainde/stored_student.proto", fileDescriptor_ef580c1c58256862)
}

var fileDescriptor_ef580c1c58256862 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x4e, 0xf2, 0x40,
	0x14, 0xc5, 0xe9, 0xf7, 0x09, 0xca, 0x20, 0x2e, 0x26, 0x2e, 0x08, 0x8b, 0x86, 0x10, 0x31, 0x6c,
	0x28, 0x06, 0x5c, 0xb9, 0xf4, 0x4f, 0x8c, 0x1b, 0x35, 0x85, 0xc4, 0x84, 0x4d, 0x33, 0xb4, 0xd3,
	0xd8, 0x44, 0x67, 0x9a, 0x99, 0xc1, 0xc0, 0x5b, 0xf0, 0x58, 0x2e, 0x59, 0xba, 0x34, 0xf0, 0x22,
	0xa6, 0x77, 0x0a, 0x14, 0xdb, 0xc4, 0xb2, 0x6c, 0x72, 0xce, 0xef, 0x9e, 0x9e, 0x7b, 0x07, 0x9d,
	0x4f, 0x58, 0xf0, 0x41, 0x85, 0x0c, 0xd4, 0xcc, 0x7d, 0x25, 0x01, 0xf3, 0x68, 0x57, 0x2a, 0x2e,
	0xa8, 0xe7, 0x48, 0x35, 0xf1, 0x28, 0x53, 0x56, 0x28, 0xb8, 0xe2, 0xb8, 0xb5, 0xd5, 0x39, 0x20,
	0x74, 0x3c, 0x6a, 0xa5, 0xbc, 0xf5, 0xb3, 0x2c, 0x1c, 0x70, 0x9c, 0x80, 0xf9, 0x5c, 0xc3, 0xea,
	0x9d, 0xb4, 0x4a, 0x09, 0xc2, 0xa4, 0x2b, 0x82, 0x50, 0x39, 0xdc, 0x77, 0x04, 0x75, 0xb9, 0xf0,
	0x64, 0x2c, 0x6f, 0xa5, 0xe5, 0x21, 0x15, 0x92, 0x33, 0xf2, 0x96, 0xa4, 0x66, 0xfc, 0x8a, 0xa0,
	0x32, 0xf0, 0x28, 0x73, 0x69, 0x52, 0x97, 0x91, 0xd1, 0xe5, 0x4c, 0x11, 0x77, 0x27, 0x63, 0x33,
	0x23, 0x23, 0x99, 0x52, 0xf9, 0x07, 0x89, 0x0a, 0x22, 0xdf, 0x27, 0x49, 0x55, 0x73, 0x5e, 0x44,
	0xd5, 0x01, 0x74, 0x3a, 0xd0, 0x55, 0xe0, 0x53, 0x54, 0x8c, 0xc4, 0xd3, 0x9a, 0xd1, 0x30, 0xda,
	0x65, 0x5b, 0x7f, 0xe0, 0x21, 0xaa, 0xc4, 0x5d, 0xdd, 0x12, 0x45, 0x6a, 0xff, 0x1a, 0x46, 0xbb,
	0xd2, 0xeb, 0x59, 0xb9, 0x8a, 0xb7, 0x62, 0xf4, 0x03, 0xf3, 0xb9, 0x9d, 0xc4, 0xe0, 0x31, 0x3a,
	0xd9, 0x76, 0x0b, 0xe0, 0xff, 0x00, 0xbe, 0xca, 0x09, 0x1e, 0x6e, 0xcc, 0x4f, 0xbe, 0xad, 0xd7,
	0x62, 0xff, 0x22, 0xe2, 0x17, 0x74, 0xbc, 0x5e, 0x08, 0x4c, 0x38, 0x80, 0x09, 0xfd, 0x9c, 0x13,
	0x9e, 0x63, 0x2b, 0x64, 0xdf, 0x01, 0xe1, 0x11, 0xaa, 0x6e, 0x56, 0x08, 0xe4, 0x22, 0x90, 0x2f,
	0x73, 0x92, 0xed, 0xb5, 0x17, 0xd0, 0xbb, 0xa8, 0xa8, 0xee, 0x78, 0xed, 0x40, 0x2e, 0xed, 0x55,
	0xf7, 0x8d, 0x76, 0xea, 0xba, 0x13, 0x18, 0xfc, 0x88, 0xca, 0x70, 0x26, 0xc0, 0x3c, 0x04, 0xe6,
	0x45, 0xde, 0xa6, 0x23, 0x1f, 0x10, 0xb7, 0x88, 0x28, 0x65, 0x7c, 0x52, 0x40, 0x3c, 0xda, 0x2b,
	0xe5, 0x9d, 0x76, 0xea, 0x94, 0x09, 0xcc, 0xf5, 0xfd, 0xe7, 0xd2, 0x34, 0x16, 0x4b, 0xd3, 0xf8,
	0x5e, 0x9a, 0xc6, 0x7c, 0x65, 0x16, 0x16, 0x2b, 0xb3, 0xf0, 0xb5, 0x32, 0x0b, 0xa3, 0x4e, 0x06,
	0xb9, 0x3b, 0xed, 0x66, 0x3c, 0x86, 0x59, 0x48, 0xe5, 0xb8, 0x04, 0x27, 0xde, 0xff, 0x09, 0x00,
	0x00, 0xff, 0xff, 0xf2, 0xc8, 0x6a, 0x69, 0x47, 0x04, 0x00, 0x00,
}

func (m *StoredStudent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredStudent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredStudent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ErasmusData != nil {
		{
			size, err := m.ErasmusData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStoredStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TaxesData != nil {
		{
			size, err := m.TaxesData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStoredStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ContactData != nil {
		{
			size, err := m.ContactData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStoredStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ResidenceData != nil {
		{
			size, err := m.ResidenceData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStoredStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PersonalData != nil {
		{
			size, err := m.PersonalData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStoredStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TranscriptData != nil {
		{
			size, err := m.TranscriptData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStoredStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StudentData != nil {
		{
			size, err := m.StudentData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStoredStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStoredStudent(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStoredStudent(dAtA []byte, offset int, v uint64) int {
	offset -= sovStoredStudent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoredStudent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStoredStudent(uint64(l))
	}
	if m.StudentData != nil {
		l = m.StudentData.Size()
		n += 1 + l + sovStoredStudent(uint64(l))
	}
	if m.TranscriptData != nil {
		l = m.TranscriptData.Size()
		n += 1 + l + sovStoredStudent(uint64(l))
	}
	if m.PersonalData != nil {
		l = m.PersonalData.Size()
		n += 1 + l + sovStoredStudent(uint64(l))
	}
	if m.ResidenceData != nil {
		l = m.ResidenceData.Size()
		n += 1 + l + sovStoredStudent(uint64(l))
	}
	if m.ContactData != nil {
		l = m.ContactData.Size()
		n += 1 + l + sovStoredStudent(uint64(l))
	}
	if m.TaxesData != nil {
		l = m.TaxesData.Size()
		n += 1 + l + sovStoredStudent(uint64(l))
	}
	if m.ErasmusData != nil {
		l = m.ErasmusData.Size()
		n += 1 + l + sovStoredStudent(uint64(l))
	}
	return n
}

func sovStoredStudent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoredStudent(x uint64) (n int) {
	return sovStoredStudent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoredStudent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoredStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredStudent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredStudent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoredStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoredStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StudentData == nil {
				m.StudentData = &StudentInfo{}
			}
			if err := m.StudentData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscriptData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoredStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoredStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TranscriptData == nil {
				m.TranscriptData = &TranscriptOfRecords{}
			}
			if err := m.TranscriptData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoredStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoredStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PersonalData == nil {
				m.PersonalData = &PersonalInfo{}
			}
			if err := m.PersonalData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoredStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoredStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResidenceData == nil {
				m.ResidenceData = &ResidenceInfo{}
			}
			if err := m.ResidenceData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoredStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoredStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContactData == nil {
				m.ContactData = &ContactInfo{}
			}
			if err := m.ContactData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxesData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoredStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoredStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaxesData == nil {
				m.TaxesData = &TaxesInfo{}
			}
			if err := m.TaxesData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErasmusData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoredStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoredStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErasmusData == nil {
				m.ErasmusData = &ErasmusInfo{}
			}
			if err := m.ErasmusData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoredStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStoredStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoredStudent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoredStudent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredStudent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredStudent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoredStudent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStoredStudent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStoredStudent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStoredStudent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoredStudent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStoredStudent = fmt.Errorf("proto: unexpected end of group")
)
