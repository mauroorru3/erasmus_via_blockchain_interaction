syntax = "proto3";
package hub.hub;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "hub/params.proto";
import "hub/stored_student.proto";
import "hub/chain_info.proto";
import "hub/universities.proto";
// this line is used by starport scaffolding # 1
import "hub/erasmus_info.proto";
import "hub/taxes_info.proto";
import "hub/contact_info.proto";
import "hub/residence_info.proto";
import "hub/personal_info.proto";
import "hub/transcript_of_records.proto";
import "hub/student_info.proto";

option go_package = "hub/x/hub/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/hub/hub/params";
  }
  // Queries a StudentInfo by index.
	rpc StudentInfo(QueryGetStudentInfoRequest) returns (QueryGetStudentInfoResponse) {
		option (google.api.http).get = "/hub/hub/student_info";
	}
// Queries a TranscriptOfRecords by index.
	rpc TranscriptOfRecords(QueryGetTranscriptOfRecordsRequest) returns (QueryGetTranscriptOfRecordsResponse) {
		option (google.api.http).get = "/hub/hub/transcript_of_records";
	}
// Queries a PersonalInfo by index.
	rpc PersonalInfo(QueryGetPersonalInfoRequest) returns (QueryGetPersonalInfoResponse) {
		option (google.api.http).get = "/hub/hub/personal_info";
	}
// Queries a ResidenceInfo by index.
	rpc ResidenceInfo(QueryGetResidenceInfoRequest) returns (QueryGetResidenceInfoResponse) {
		option (google.api.http).get = "/hub/hub/residence_info";
	}
// Queries a ContactInfo by index.
	rpc ContactInfo(QueryGetContactInfoRequest) returns (QueryGetContactInfoResponse) {
		option (google.api.http).get = "/hub/hub/contact_info";
	}
// Queries a TaxesInfo by index.
	rpc TaxesInfo(QueryGetTaxesInfoRequest) returns (QueryGetTaxesInfoResponse) {
		option (google.api.http).get = "/hub/hub/taxes_info";
	}
// Queries a ErasmusInfo by index.
	rpc ErasmusInfo(QueryGetErasmusInfoRequest) returns (QueryGetErasmusInfoResponse) {
		option (google.api.http).get = "/hub/hub/erasmus_info";
	}
// Queries a StoredStudent by index.
	rpc StoredStudent(QueryGetStoredStudentRequest) returns (QueryGetStoredStudentResponse) {
		option (google.api.http).get = "/hub/hub/stored_student/{index}";
	}

	// Queries a list of StoredStudent items.
	rpc StoredStudentAll(QueryAllStoredStudentRequest) returns (QueryAllStoredStudentResponse) {
		option (google.api.http).get = "/hub/hub/stored_student";
	}

// Queries a ChainInfo by index.
	rpc ChainInfo(QueryGetChainInfoRequest) returns (QueryGetChainInfoResponse) {
		option (google.api.http).get = "/hub/hub/chain_info";
	}
// Queries a Universities by index.
	rpc Universities(QueryGetUniversitiesRequest) returns (QueryGetUniversitiesResponse) {
		option (google.api.http).get = "/hub/hub/universities/{universityName}";
	}

	// Queries a list of Universities items.
	rpc UniversitiesAll(QueryAllUniversitiesRequest) returns (QueryAllUniversitiesResponse) {
		option (google.api.http).get = "/hub/hub/universities";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetStudentInfoRequest {}

message QueryGetStudentInfoResponse {
	StudentInfo StudentInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetTranscriptOfRecordsRequest {}

message QueryGetTranscriptOfRecordsResponse {
	TranscriptOfRecords TranscriptOfRecords = 1 [(gogoproto.nullable) = false];
}
message QueryGetPersonalInfoRequest {}

message QueryGetPersonalInfoResponse {
	PersonalInfo PersonalInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetResidenceInfoRequest {}

message QueryGetResidenceInfoResponse {
	ResidenceInfo ResidenceInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetContactInfoRequest {}

message QueryGetContactInfoResponse {
	ContactInfo ContactInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetTaxesInfoRequest {}

message QueryGetTaxesInfoResponse {
	TaxesInfo TaxesInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetErasmusInfoRequest {}

message QueryGetErasmusInfoResponse {
	ErasmusInfo ErasmusInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetStoredStudentRequest {
	  string index = 1;

}

message QueryGetStoredStudentResponse {
	StoredStudent storedStudent = 1 [(gogoproto.nullable) = false];
}

message QueryAllStoredStudentRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStoredStudentResponse {
	repeated StoredStudent storedStudent = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetChainInfoRequest {}

message QueryGetChainInfoResponse {
	ChainInfo ChainInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetUniversitiesRequest {
	  string universityName = 1;

}

message QueryGetUniversitiesResponse {
	Universities universities = 1 [(gogoproto.nullable) = false];
}

message QueryAllUniversitiesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUniversitiesResponse {
	repeated Universities universities = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
