// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hub/universities.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Universities struct {
	UniversityName      string `protobuf:"bytes,1,opt,name=universityName,proto3" json:"universityName,omitempty"`
	UniversitiesKey     string `protobuf:"bytes,2,opt,name=universitiesKey,proto3" json:"universitiesKey,omitempty"`
	UniversitiesCountry string `protobuf:"bytes,3,opt,name=universitiesCountry,proto3" json:"universitiesCountry,omitempty"`
	ChainName           string `protobuf:"bytes,4,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Port                string `protobuf:"bytes,5,opt,name=port,proto3" json:"port,omitempty"`
	ChannelID           string `protobuf:"bytes,6,opt,name=channelID,proto3" json:"channelID,omitempty"`
}

func (m *Universities) Reset()         { *m = Universities{} }
func (m *Universities) String() string { return proto.CompactTextString(m) }
func (*Universities) ProtoMessage()    {}
func (*Universities) Descriptor() ([]byte, []int) {
	return fileDescriptor_493d367c49d2df6b, []int{0}
}
func (m *Universities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Universities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Universities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Universities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Universities.Merge(m, src)
}
func (m *Universities) XXX_Size() int {
	return m.Size()
}
func (m *Universities) XXX_DiscardUnknown() {
	xxx_messageInfo_Universities.DiscardUnknown(m)
}

var xxx_messageInfo_Universities proto.InternalMessageInfo

func (m *Universities) GetUniversityName() string {
	if m != nil {
		return m.UniversityName
	}
	return ""
}

func (m *Universities) GetUniversitiesKey() string {
	if m != nil {
		return m.UniversitiesKey
	}
	return ""
}

func (m *Universities) GetUniversitiesCountry() string {
	if m != nil {
		return m.UniversitiesCountry
	}
	return ""
}

func (m *Universities) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *Universities) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Universities) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func init() {
	proto.RegisterType((*Universities)(nil), "hub.hub.Universities")
}

func init() { proto.RegisterFile("hub/universities.proto", fileDescriptor_493d367c49d2df6b) }

var fileDescriptor_493d367c49d2df6b = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0x28, 0x4d, 0xd2,
	0x2f, 0xcd, 0xcb, 0x2c, 0x4b, 0x2d, 0x2a, 0xce, 0x2c, 0xc9, 0x4c, 0x2d, 0xd6, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0xcf, 0x28, 0x4d, 0xd2, 0xcb, 0x28, 0x4d, 0x52, 0x7a, 0xc4, 0xc8, 0xc5,
	0x13, 0x8a, 0x24, 0x2f, 0xa4, 0xc6, 0xc5, 0x07, 0x57, 0x5f, 0xe9, 0x97, 0x98, 0x9b, 0x2a, 0xc1,
	0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x84, 0x26, 0x2a, 0xa4, 0xc1, 0xc5, 0x8f, 0x6c, 0xae, 0x77, 0x6a,
	0xa5, 0x04, 0x13, 0x58, 0x21, 0xba, 0xb0, 0x90, 0x01, 0x97, 0x30, 0xb2, 0x90, 0x73, 0x7e, 0x69,
	0x5e, 0x49, 0x51, 0xa5, 0x04, 0x33, 0x58, 0x35, 0x36, 0x29, 0x21, 0x19, 0x2e, 0xce, 0xe4, 0x8c,
	0xc4, 0xcc, 0x3c, 0xb0, 0xf5, 0x2c, 0x60, 0x75, 0x08, 0x01, 0x21, 0x21, 0x2e, 0x96, 0x82, 0xfc,
	0xa2, 0x12, 0x09, 0x56, 0xb0, 0x04, 0x98, 0x0d, 0xd5, 0x91, 0x97, 0x97, 0x9a, 0xe3, 0xe9, 0x22,
	0xc1, 0x06, 0xd7, 0x01, 0x11, 0x70, 0xd2, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6,
	0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39,
	0x86, 0x28, 0x7e, 0x50, 0xf8, 0x54, 0xe8, 0x83, 0xc8, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36,
	0x70, 0xf8, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xaf, 0x80, 0x8d, 0x39, 0x01, 0x00,
	0x00,
}

func (m *Universities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Universities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Universities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintUniversities(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintUniversities(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintUniversities(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UniversitiesCountry) > 0 {
		i -= len(m.UniversitiesCountry)
		copy(dAtA[i:], m.UniversitiesCountry)
		i = encodeVarintUniversities(dAtA, i, uint64(len(m.UniversitiesCountry)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UniversitiesKey) > 0 {
		i -= len(m.UniversitiesKey)
		copy(dAtA[i:], m.UniversitiesKey)
		i = encodeVarintUniversities(dAtA, i, uint64(len(m.UniversitiesKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniversityName) > 0 {
		i -= len(m.UniversityName)
		copy(dAtA[i:], m.UniversityName)
		i = encodeVarintUniversities(dAtA, i, uint64(len(m.UniversityName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUniversities(dAtA []byte, offset int, v uint64) int {
	offset -= sovUniversities(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Universities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniversityName)
	if l > 0 {
		n += 1 + l + sovUniversities(uint64(l))
	}
	l = len(m.UniversitiesKey)
	if l > 0 {
		n += 1 + l + sovUniversities(uint64(l))
	}
	l = len(m.UniversitiesCountry)
	if l > 0 {
		n += 1 + l + sovUniversities(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovUniversities(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovUniversities(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovUniversities(uint64(l))
	}
	return n
}

func sovUniversities(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUniversities(x uint64) (n int) {
	return sovUniversities(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Universities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUniversities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Universities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Universities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUniversities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUniversities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUniversities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniversityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversitiesKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUniversities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUniversities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUniversities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniversitiesKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversitiesCountry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUniversities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUniversities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUniversities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniversitiesCountry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUniversities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUniversities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUniversities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUniversities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUniversities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUniversities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUniversities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUniversities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUniversities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUniversities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUniversities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUniversities(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUniversities
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUniversities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUniversities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUniversities
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUniversities
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUniversities
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUniversities        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUniversities          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUniversities = fmt.Errorf("proto: unexpected end of group")
)
