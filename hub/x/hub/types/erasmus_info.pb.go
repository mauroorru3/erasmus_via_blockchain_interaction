// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hub/erasmus_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErasmusInfo struct {
	ErasmusStudent      string `protobuf:"bytes,1,opt,name=erasmusStudent,proto3" json:"erasmusStudent,omitempty"`
	NumberTimes         uint64 `protobuf:"varint,2,opt,name=numberTimes,proto3" json:"numberTimes,omitempty"`
	NumberMonths        uint64 `protobuf:"varint,3,opt,name=numberMonths,proto3" json:"numberMonths,omitempty"`
	TotalExams          uint64 `protobuf:"varint,4,opt,name=totalExams,proto3" json:"totalExams,omitempty"`
	ExamsPassed         uint64 `protobuf:"varint,5,opt,name=examsPassed,proto3" json:"examsPassed,omitempty"`
	TotalCredits        uint64 `protobuf:"varint,6,opt,name=totalCredits,proto3" json:"totalCredits,omitempty"`
	AchievedCredits     uint64 `protobuf:"varint,7,opt,name=achievedCredits,proto3" json:"achievedCredits,omitempty"`
	Career              string `protobuf:"bytes,8,opt,name=career,proto3" json:"career,omitempty"`
	PreviousStudentFifo string `protobuf:"bytes,9,opt,name=previousStudentFifo,proto3" json:"previousStudentFifo,omitempty"`
	NextStudentFifo     string `protobuf:"bytes,10,opt,name=nextStudentFifo,proto3" json:"nextStudentFifo,omitempty"`
}

func (m *ErasmusInfo) Reset()         { *m = ErasmusInfo{} }
func (m *ErasmusInfo) String() string { return proto.CompactTextString(m) }
func (*ErasmusInfo) ProtoMessage()    {}
func (*ErasmusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_97729c7dcc256bfc, []int{0}
}
func (m *ErasmusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErasmusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErasmusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErasmusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErasmusInfo.Merge(m, src)
}
func (m *ErasmusInfo) XXX_Size() int {
	return m.Size()
}
func (m *ErasmusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ErasmusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ErasmusInfo proto.InternalMessageInfo

func (m *ErasmusInfo) GetErasmusStudent() string {
	if m != nil {
		return m.ErasmusStudent
	}
	return ""
}

func (m *ErasmusInfo) GetNumberTimes() uint64 {
	if m != nil {
		return m.NumberTimes
	}
	return 0
}

func (m *ErasmusInfo) GetNumberMonths() uint64 {
	if m != nil {
		return m.NumberMonths
	}
	return 0
}

func (m *ErasmusInfo) GetTotalExams() uint64 {
	if m != nil {
		return m.TotalExams
	}
	return 0
}

func (m *ErasmusInfo) GetExamsPassed() uint64 {
	if m != nil {
		return m.ExamsPassed
	}
	return 0
}

func (m *ErasmusInfo) GetTotalCredits() uint64 {
	if m != nil {
		return m.TotalCredits
	}
	return 0
}

func (m *ErasmusInfo) GetAchievedCredits() uint64 {
	if m != nil {
		return m.AchievedCredits
	}
	return 0
}

func (m *ErasmusInfo) GetCareer() string {
	if m != nil {
		return m.Career
	}
	return ""
}

func (m *ErasmusInfo) GetPreviousStudentFifo() string {
	if m != nil {
		return m.PreviousStudentFifo
	}
	return ""
}

func (m *ErasmusInfo) GetNextStudentFifo() string {
	if m != nil {
		return m.NextStudentFifo
	}
	return ""
}

func init() {
	proto.RegisterType((*ErasmusInfo)(nil), "hub.hub.ErasmusInfo")
}

func init() { proto.RegisterFile("hub/erasmus_info.proto", fileDescriptor_97729c7dcc256bfc) }

var fileDescriptor_97729c7dcc256bfc = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x97, 0x39, 0x37, 0x97, 0x89, 0x83, 0x08, 0x23, 0xa7, 0x30, 0x76, 0x90, 0x79, 0xd9,
	0x04, 0xbf, 0x81, 0x32, 0xc1, 0x83, 0x20, 0xd3, 0x93, 0x17, 0x49, 0xd7, 0xb7, 0x34, 0x60, 0x93,
	0x92, 0x3f, 0xa3, 0x7e, 0x0b, 0x3f, 0x96, 0xc7, 0x1d, 0x3d, 0x4a, 0xfb, 0x41, 0x94, 0xa4, 0x53,
	0x6a, 0xf1, 0x12, 0xf2, 0xfe, 0xde, 0x1f, 0x3c, 0x24, 0x0f, 0x9e, 0xa4, 0x2e, 0x5a, 0x82, 0xe6,
	0x26, 0x73, 0xe6, 0x59, 0xc8, 0x44, 0x2d, 0x72, 0xad, 0xac, 0x22, 0x83, 0xd4, 0x45, 0x8b, 0xd4,
	0x45, 0xb3, 0xaf, 0x2e, 0x1e, 0xad, 0xea, 0xfd, 0xad, 0x4c, 0x14, 0x39, 0xc3, 0x27, 0x7b, 0xfd,
	0xc1, 0xba, 0x18, 0xa4, 0xa5, 0x68, 0x8a, 0xe6, 0xc3, 0x75, 0x8b, 0x92, 0x29, 0x1e, 0x49, 0x97,
	0x45, 0xa0, 0x1f, 0x45, 0x06, 0x86, 0x76, 0xa7, 0x68, 0xde, 0x5b, 0x37, 0x11, 0x99, 0xe1, 0xe3,
	0x7a, 0xbc, 0x53, 0xd2, 0xa6, 0x86, 0x1e, 0x04, 0xe5, 0x0f, 0x23, 0x0c, 0x63, 0xab, 0x2c, 0x7f,
	0x59, 0x15, 0x3c, 0x33, 0xb4, 0x17, 0x8c, 0x06, 0xf1, 0x29, 0xe0, 0x2f, 0xf7, 0xdc, 0x18, 0x88,
	0xe9, 0x61, 0x9d, 0xd2, 0x40, 0x3e, 0x25, 0xf8, 0xd7, 0x1a, 0x62, 0x61, 0x0d, 0xed, 0xd7, 0x29,
	0x4d, 0x46, 0xe6, 0x78, 0xcc, 0x37, 0xa9, 0x80, 0x2d, 0xc4, 0x3f, 0xda, 0x20, 0x68, 0x6d, 0x4c,
	0x26, 0xb8, 0xbf, 0xe1, 0x1a, 0x40, 0xd3, 0xa3, 0xf0, 0xea, 0xfd, 0x44, 0x2e, 0xf0, 0x69, 0xae,
	0x61, 0x2b, 0xd4, 0xef, 0x07, 0xdc, 0x88, 0x44, 0xd1, 0x61, 0x90, 0xfe, 0x5b, 0xf9, 0x4c, 0x09,
	0x85, 0x6d, 0xda, 0x38, 0xd8, 0x6d, 0x7c, 0x75, 0xfe, 0x5e, 0x32, 0xb4, 0x2b, 0x19, 0xfa, 0x2c,
	0x19, 0x7a, 0xab, 0x58, 0x67, 0x57, 0xb1, 0xce, 0x47, 0xc5, 0x3a, 0x4f, 0x63, 0x5f, 0x5e, 0xb1,
	0xf4, 0xa7, 0x7d, 0xcd, 0xc1, 0x44, 0xfd, 0x50, 0xde, 0xe5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0e, 0xd5, 0x36, 0xb2, 0xd6, 0x01, 0x00, 0x00,
}

func (m *ErasmusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErasmusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErasmusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextStudentFifo) > 0 {
		i -= len(m.NextStudentFifo)
		copy(dAtA[i:], m.NextStudentFifo)
		i = encodeVarintErasmusInfo(dAtA, i, uint64(len(m.NextStudentFifo)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PreviousStudentFifo) > 0 {
		i -= len(m.PreviousStudentFifo)
		copy(dAtA[i:], m.PreviousStudentFifo)
		i = encodeVarintErasmusInfo(dAtA, i, uint64(len(m.PreviousStudentFifo)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Career) > 0 {
		i -= len(m.Career)
		copy(dAtA[i:], m.Career)
		i = encodeVarintErasmusInfo(dAtA, i, uint64(len(m.Career)))
		i--
		dAtA[i] = 0x42
	}
	if m.AchievedCredits != 0 {
		i = encodeVarintErasmusInfo(dAtA, i, uint64(m.AchievedCredits))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalCredits != 0 {
		i = encodeVarintErasmusInfo(dAtA, i, uint64(m.TotalCredits))
		i--
		dAtA[i] = 0x30
	}
	if m.ExamsPassed != 0 {
		i = encodeVarintErasmusInfo(dAtA, i, uint64(m.ExamsPassed))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalExams != 0 {
		i = encodeVarintErasmusInfo(dAtA, i, uint64(m.TotalExams))
		i--
		dAtA[i] = 0x20
	}
	if m.NumberMonths != 0 {
		i = encodeVarintErasmusInfo(dAtA, i, uint64(m.NumberMonths))
		i--
		dAtA[i] = 0x18
	}
	if m.NumberTimes != 0 {
		i = encodeVarintErasmusInfo(dAtA, i, uint64(m.NumberTimes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ErasmusStudent) > 0 {
		i -= len(m.ErasmusStudent)
		copy(dAtA[i:], m.ErasmusStudent)
		i = encodeVarintErasmusInfo(dAtA, i, uint64(len(m.ErasmusStudent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintErasmusInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovErasmusInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ErasmusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErasmusStudent)
	if l > 0 {
		n += 1 + l + sovErasmusInfo(uint64(l))
	}
	if m.NumberTimes != 0 {
		n += 1 + sovErasmusInfo(uint64(m.NumberTimes))
	}
	if m.NumberMonths != 0 {
		n += 1 + sovErasmusInfo(uint64(m.NumberMonths))
	}
	if m.TotalExams != 0 {
		n += 1 + sovErasmusInfo(uint64(m.TotalExams))
	}
	if m.ExamsPassed != 0 {
		n += 1 + sovErasmusInfo(uint64(m.ExamsPassed))
	}
	if m.TotalCredits != 0 {
		n += 1 + sovErasmusInfo(uint64(m.TotalCredits))
	}
	if m.AchievedCredits != 0 {
		n += 1 + sovErasmusInfo(uint64(m.AchievedCredits))
	}
	l = len(m.Career)
	if l > 0 {
		n += 1 + l + sovErasmusInfo(uint64(l))
	}
	l = len(m.PreviousStudentFifo)
	if l > 0 {
		n += 1 + l + sovErasmusInfo(uint64(l))
	}
	l = len(m.NextStudentFifo)
	if l > 0 {
		n += 1 + l + sovErasmusInfo(uint64(l))
	}
	return n
}

func sovErasmusInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErasmusInfo(x uint64) (n int) {
	return sovErasmusInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ErasmusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErasmusInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErasmusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErasmusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErasmusStudent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErasmusInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErasmusStudent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberTimes", wireType)
			}
			m.NumberTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberTimes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberMonths", wireType)
			}
			m.NumberMonths = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberMonths |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalExams", wireType)
			}
			m.TotalExams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalExams |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamsPassed", wireType)
			}
			m.ExamsPassed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExamsPassed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCredits", wireType)
			}
			m.TotalCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievedCredits", wireType)
			}
			m.AchievedCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievedCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Career", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErasmusInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Career = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStudentFifo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErasmusInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousStudentFifo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextStudentFifo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErasmusInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextStudentFifo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErasmusInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthErasmusInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErasmusInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErasmusInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErasmusInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErasmusInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupErasmusInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthErasmusInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthErasmusInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErasmusInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupErasmusInfo = fmt.Errorf("proto: unexpected end of group")
)
