// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: universitychainit/residence_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ResidenceInfo struct {
	Country     string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Province    string `protobuf:"bytes,2,opt,name=province,proto3" json:"province,omitempty"`
	Town        string `protobuf:"bytes,3,opt,name=town,proto3" json:"town,omitempty"`
	PostCode    string `protobuf:"bytes,4,opt,name=postCode,proto3" json:"postCode,omitempty"`
	Address     string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	HouseNumber string `protobuf:"bytes,6,opt,name=houseNumber,proto3" json:"houseNumber,omitempty"`
	HomePhone   string `protobuf:"bytes,7,opt,name=homePhone,proto3" json:"homePhone,omitempty"`
}

func (m *ResidenceInfo) Reset()         { *m = ResidenceInfo{} }
func (m *ResidenceInfo) String() string { return proto.CompactTextString(m) }
func (*ResidenceInfo) ProtoMessage()    {}
func (*ResidenceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b2e04ec2b0d223, []int{0}
}
func (m *ResidenceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResidenceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResidenceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResidenceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResidenceInfo.Merge(m, src)
}
func (m *ResidenceInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResidenceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResidenceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResidenceInfo proto.InternalMessageInfo

func (m *ResidenceInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *ResidenceInfo) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *ResidenceInfo) GetTown() string {
	if m != nil {
		return m.Town
	}
	return ""
}

func (m *ResidenceInfo) GetPostCode() string {
	if m != nil {
		return m.PostCode
	}
	return ""
}

func (m *ResidenceInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ResidenceInfo) GetHouseNumber() string {
	if m != nil {
		return m.HouseNumber
	}
	return ""
}

func (m *ResidenceInfo) GetHomePhone() string {
	if m != nil {
		return m.HomePhone
	}
	return ""
}

func init() {
	proto.RegisterType((*ResidenceInfo)(nil), "university_chain_it.universitychainit.ResidenceInfo")
}

func init() {
	proto.RegisterFile("universitychainit/residence_info.proto", fileDescriptor_66b2e04ec2b0d223)
}

var fileDescriptor_66b2e04ec2b0d223 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbd, 0x4e, 0xc3, 0x40,
	0x10, 0x84, 0x7d, 0x10, 0x12, 0x72, 0x88, 0xe6, 0xaa, 0x13, 0x42, 0xa7, 0x08, 0x09, 0x44, 0x43,
	0x5c, 0xf0, 0x06, 0x50, 0x20, 0x1a, 0x84, 0x52, 0xd2, 0x58, 0x89, 0xbd, 0x91, 0xaf, 0xc8, 0xae,
	0x75, 0x3f, 0x01, 0xbf, 0x05, 0x8f, 0x45, 0x47, 0x4a, 0x4a, 0x64, 0xbf, 0x08, 0x62, 0x71, 0x08,
	0x92, 0xe9, 0x76, 0x66, 0xbe, 0xd5, 0x48, 0x23, 0x2f, 0x22, 0xda, 0x35, 0x38, 0x6f, 0x43, 0x9d,
	0x97, 0x73, 0x8b, 0x36, 0xa4, 0x0e, 0xbc, 0x2d, 0x00, 0x73, 0xc8, 0x2c, 0x2e, 0x69, 0x5a, 0x39,
	0x0a, 0xa4, 0xce, 0x77, 0x5c, 0xc6, 0x60, 0x66, 0xc3, 0xb4, 0xf7, 0x7b, 0xf6, 0x2e, 0xe4, 0xf1,
	0x6c, 0xfb, 0x7f, 0x8f, 0x4b, 0x52, 0x5a, 0x8e, 0x72, 0x8a, 0x18, 0x5c, 0xad, 0xc5, 0x44, 0x5c,
	0x8e, 0x67, 0x5b, 0xa9, 0x4e, 0xe4, 0x61, 0xe5, 0x68, 0x6d, 0x31, 0x07, 0xbd, 0xc7, 0xd1, 0xaf,
	0x56, 0x4a, 0x0e, 0x02, 0x3d, 0xa3, 0xde, 0x67, 0x9f, 0x6f, 0xe6, 0xc9, 0x87, 0x5b, 0x2a, 0x40,
	0x0f, 0x3a, 0xbe, 0xd3, 0xdf, 0x2d, 0xf3, 0xa2, 0x70, 0xe0, 0xbd, 0x3e, 0xf8, 0x69, 0xe9, 0xa4,
	0x9a, 0xc8, 0xa3, 0x92, 0xa2, 0x87, 0x87, 0xb8, 0x5a, 0x80, 0xd3, 0x43, 0x4e, 0xff, 0x5a, 0xea,
	0x54, 0x8e, 0x4b, 0x5a, 0xc1, 0x63, 0x49, 0x08, 0x7a, 0xc4, 0xf9, 0xce, 0xb8, 0xb9, 0x7b, 0x6b,
	0x8c, 0xd8, 0x34, 0x46, 0x7c, 0x36, 0x46, 0xbc, 0xb6, 0x26, 0xd9, 0xb4, 0x26, 0xf9, 0x68, 0x4d,
	0xf2, 0x74, 0xf5, 0xcf, 0x24, 0xe9, 0x4b, 0xda, 0x1f, 0x34, 0xd4, 0x15, 0xf8, 0xc5, 0x90, 0x87,
	0xbc, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x86, 0x9d, 0x98, 0x72, 0x01, 0x00, 0x00,
}

func (m *ResidenceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResidenceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResidenceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HomePhone) > 0 {
		i -= len(m.HomePhone)
		copy(dAtA[i:], m.HomePhone)
		i = encodeVarintResidenceInfo(dAtA, i, uint64(len(m.HomePhone)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HouseNumber) > 0 {
		i -= len(m.HouseNumber)
		copy(dAtA[i:], m.HouseNumber)
		i = encodeVarintResidenceInfo(dAtA, i, uint64(len(m.HouseNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintResidenceInfo(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PostCode) > 0 {
		i -= len(m.PostCode)
		copy(dAtA[i:], m.PostCode)
		i = encodeVarintResidenceInfo(dAtA, i, uint64(len(m.PostCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Town) > 0 {
		i -= len(m.Town)
		copy(dAtA[i:], m.Town)
		i = encodeVarintResidenceInfo(dAtA, i, uint64(len(m.Town)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Province) > 0 {
		i -= len(m.Province)
		copy(dAtA[i:], m.Province)
		i = encodeVarintResidenceInfo(dAtA, i, uint64(len(m.Province)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintResidenceInfo(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintResidenceInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovResidenceInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResidenceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovResidenceInfo(uint64(l))
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovResidenceInfo(uint64(l))
	}
	l = len(m.Town)
	if l > 0 {
		n += 1 + l + sovResidenceInfo(uint64(l))
	}
	l = len(m.PostCode)
	if l > 0 {
		n += 1 + l + sovResidenceInfo(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovResidenceInfo(uint64(l))
	}
	l = len(m.HouseNumber)
	if l > 0 {
		n += 1 + l + sovResidenceInfo(uint64(l))
	}
	l = len(m.HomePhone)
	if l > 0 {
		n += 1 + l + sovResidenceInfo(uint64(l))
	}
	return n
}

func sovResidenceInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResidenceInfo(x uint64) (n int) {
	return sovResidenceInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResidenceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResidenceInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResidenceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResidenceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResidenceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResidenceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Town", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResidenceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Town = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResidenceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResidenceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResidenceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HouseNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResidenceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomePhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResidenceInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResidenceInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResidenceInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResidenceInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResidenceInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResidenceInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResidenceInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResidenceInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResidenceInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResidenceInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResidenceInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResidenceInfo = fmt.Errorf("proto: unexpected end of group")
)
