// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: universitychainit/taxes_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TaxesInfo struct {
	Status       bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	TotalAmount  uint32 `protobuf:"varint,2,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	TaxesHistory string `protobuf:"bytes,3,opt,name=taxesHistory,proto3" json:"taxesHistory,omitempty"`
}

func (m *TaxesInfo) Reset()         { *m = TaxesInfo{} }
func (m *TaxesInfo) String() string { return proto.CompactTextString(m) }
func (*TaxesInfo) ProtoMessage()    {}
func (*TaxesInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_409477814400c378, []int{0}
}
func (m *TaxesInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaxesInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaxesInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaxesInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaxesInfo.Merge(m, src)
}
func (m *TaxesInfo) XXX_Size() int {
	return m.Size()
}
func (m *TaxesInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaxesInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaxesInfo proto.InternalMessageInfo

func (m *TaxesInfo) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *TaxesInfo) GetTotalAmount() uint32 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *TaxesInfo) GetTaxesHistory() string {
	if m != nil {
		return m.TaxesHistory
	}
	return ""
}

func init() {
	proto.RegisterType((*TaxesInfo)(nil), "university_chain_it.universitychainit.TaxesInfo")
}

func init() {
	proto.RegisterFile("universitychainit/taxes_info.proto", fileDescriptor_409477814400c378)
}

var fileDescriptor_409477814400c378 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0xcd, 0xcb, 0x2c,
	0x4b, 0x2d, 0x2a, 0xce, 0x2c, 0xa9, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xcb, 0x2c, 0xd1, 0x2f, 0x49,
	0xac, 0x48, 0x2d, 0x8e, 0xcf, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52,
	0x45, 0xa8, 0x89, 0x07, 0x2b, 0x8a, 0xcf, 0x2c, 0xd1, 0xc3, 0xd0, 0xa7, 0x94, 0xc9, 0xc5, 0x19,
	0x02, 0xd2, 0xea, 0x99, 0x97, 0x96, 0x2f, 0x24, 0xc6, 0xc5, 0x56, 0x5c, 0x92, 0x58, 0x52, 0x5a,
	0x2c, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x11, 0x04, 0xe5, 0x09, 0x29, 0x70, 0x71, 0x97, 0xe4, 0x97,
	0x24, 0xe6, 0x38, 0xe6, 0xe6, 0x97, 0xe6, 0x95, 0x48, 0x30, 0x29, 0x30, 0x6a, 0xf0, 0x06, 0x21,
	0x0b, 0x09, 0x29, 0x71, 0xf1, 0x80, 0x5d, 0xe0, 0x91, 0x59, 0x5c, 0x92, 0x5f, 0x54, 0x29, 0xc1,
	0xac, 0xc0, 0xa8, 0xc1, 0x19, 0x84, 0x22, 0xe6, 0xe4, 0x7e, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47,
	0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d,
	0xc7, 0x72, 0x0c, 0x51, 0xba, 0x58, 0xdc, 0xaa, 0x5f, 0xa1, 0x8f, 0xc5, 0x97, 0x95, 0x05, 0xa9,
	0xc5, 0x49, 0x6c, 0x60, 0x1f, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x09, 0x83, 0xf9, 0xbc,
	0x07, 0x01, 0x00, 0x00,
}

func (m *TaxesInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaxesInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaxesInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaxesHistory) > 0 {
		i -= len(m.TaxesHistory)
		copy(dAtA[i:], m.TaxesHistory)
		i = encodeVarintTaxesInfo(dAtA, i, uint64(len(m.TaxesHistory)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TotalAmount != 0 {
		i = encodeVarintTaxesInfo(dAtA, i, uint64(m.TotalAmount))
		i--
		dAtA[i] = 0x10
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTaxesInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovTaxesInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaxesInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.TotalAmount != 0 {
		n += 1 + sovTaxesInfo(uint64(m.TotalAmount))
	}
	l = len(m.TaxesHistory)
	if l > 0 {
		n += 1 + l + sovTaxesInfo(uint64(l))
	}
	return n
}

func sovTaxesInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTaxesInfo(x uint64) (n int) {
	return sovTaxesInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaxesInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaxesInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaxesInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaxesInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxesInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			m.TotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxesInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAmount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxesHistory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxesInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaxesInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaxesInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxesHistory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaxesInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaxesInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTaxesInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTaxesInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaxesInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaxesInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTaxesInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTaxesInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTaxesInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTaxesInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTaxesInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTaxesInfo = fmt.Errorf("proto: unexpected end of group")
)
