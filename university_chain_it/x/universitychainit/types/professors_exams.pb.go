// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: universitychainit/professors_exams.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProfessorsExams struct {
	ExamName      string `protobuf:"bytes,1,opt,name=examName,proto3" json:"examName,omitempty"`
	ProfessorName string `protobuf:"bytes,2,opt,name=professorName,proto3" json:"professorName,omitempty"`
	ProfessorId   string `protobuf:"bytes,3,opt,name=professorId,proto3" json:"professorId,omitempty"`
	ProfessorKey  string `protobuf:"bytes,4,opt,name=professorKey,proto3" json:"professorKey,omitempty"`
}

func (m *ProfessorsExams) Reset()         { *m = ProfessorsExams{} }
func (m *ProfessorsExams) String() string { return proto.CompactTextString(m) }
func (*ProfessorsExams) ProtoMessage()    {}
func (*ProfessorsExams) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ad7d33efd222a3, []int{0}
}
func (m *ProfessorsExams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfessorsExams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfessorsExams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfessorsExams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfessorsExams.Merge(m, src)
}
func (m *ProfessorsExams) XXX_Size() int {
	return m.Size()
}
func (m *ProfessorsExams) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfessorsExams.DiscardUnknown(m)
}

var xxx_messageInfo_ProfessorsExams proto.InternalMessageInfo

func (m *ProfessorsExams) GetExamName() string {
	if m != nil {
		return m.ExamName
	}
	return ""
}

func (m *ProfessorsExams) GetProfessorName() string {
	if m != nil {
		return m.ProfessorName
	}
	return ""
}

func (m *ProfessorsExams) GetProfessorId() string {
	if m != nil {
		return m.ProfessorId
	}
	return ""
}

func (m *ProfessorsExams) GetProfessorKey() string {
	if m != nil {
		return m.ProfessorKey
	}
	return ""
}

func init() {
	proto.RegisterType((*ProfessorsExams)(nil), "university_chain_it.universitychainit.ProfessorsExams")
}

func init() {
	proto.RegisterFile("universitychainit/professors_exams.proto", fileDescriptor_27ad7d33efd222a3)
}

var fileDescriptor_27ad7d33efd222a3 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x28, 0xcd, 0xcb, 0x2c,
	0x4b, 0x2d, 0x2a, 0xce, 0x2c, 0xa9, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xcb, 0x2c, 0xd1, 0x2f, 0x28,
	0xca, 0x4f, 0x4b, 0x2d, 0x2e, 0xce, 0x2f, 0x2a, 0x8e, 0x4f, 0xad, 0x48, 0xcc, 0x2d, 0xd6, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x45, 0xa8, 0x8c, 0x07, 0x2b, 0x8d, 0xcf, 0x2c, 0xd1, 0xc3,
	0xd0, 0xad, 0x34, 0x93, 0x91, 0x8b, 0x3f, 0x00, 0x6e, 0x82, 0x2b, 0xc8, 0x00, 0x21, 0x29, 0x2e,
	0x0e, 0x90, 0x49, 0x7e, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x70, 0xbe,
	0x90, 0x0a, 0x17, 0x2f, 0xdc, 0x42, 0xb0, 0x02, 0x26, 0xb0, 0x02, 0x54, 0x41, 0x21, 0x05, 0x2e,
	0x6e, 0xb8, 0x80, 0x67, 0x8a, 0x04, 0x33, 0x58, 0x0d, 0xb2, 0x90, 0x90, 0x12, 0x17, 0x0f, 0x9c,
	0xeb, 0x9d, 0x5a, 0x29, 0xc1, 0x02, 0x56, 0x82, 0x22, 0xe6, 0xe4, 0x7e, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c,
	0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xba, 0x58, 0x3c, 0xa7, 0x5f, 0xa1, 0x8f, 0x19, 0x38, 0x25,
	0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0xe0, 0x20, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x01,
	0x29, 0xa2, 0xc4, 0x3e, 0x01, 0x00, 0x00,
}

func (m *ProfessorsExams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfessorsExams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfessorsExams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProfessorKey) > 0 {
		i -= len(m.ProfessorKey)
		copy(dAtA[i:], m.ProfessorKey)
		i = encodeVarintProfessorsExams(dAtA, i, uint64(len(m.ProfessorKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProfessorId) > 0 {
		i -= len(m.ProfessorId)
		copy(dAtA[i:], m.ProfessorId)
		i = encodeVarintProfessorsExams(dAtA, i, uint64(len(m.ProfessorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProfessorName) > 0 {
		i -= len(m.ProfessorName)
		copy(dAtA[i:], m.ProfessorName)
		i = encodeVarintProfessorsExams(dAtA, i, uint64(len(m.ProfessorName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExamName) > 0 {
		i -= len(m.ExamName)
		copy(dAtA[i:], m.ExamName)
		i = encodeVarintProfessorsExams(dAtA, i, uint64(len(m.ExamName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProfessorsExams(dAtA []byte, offset int, v uint64) int {
	offset -= sovProfessorsExams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProfessorsExams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExamName)
	if l > 0 {
		n += 1 + l + sovProfessorsExams(uint64(l))
	}
	l = len(m.ProfessorName)
	if l > 0 {
		n += 1 + l + sovProfessorsExams(uint64(l))
	}
	l = len(m.ProfessorId)
	if l > 0 {
		n += 1 + l + sovProfessorsExams(uint64(l))
	}
	l = len(m.ProfessorKey)
	if l > 0 {
		n += 1 + l + sovProfessorsExams(uint64(l))
	}
	return n
}

func sovProfessorsExams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProfessorsExams(x uint64) (n int) {
	return sovProfessorsExams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProfessorsExams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfessorsExams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfessorsExams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfessorsExams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfessorsExams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfessorsExams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfessorsExams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfessorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfessorsExams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfessorsExams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfessorsExams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfessorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfessorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfessorsExams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfessorsExams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfessorsExams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfessorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfessorKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfessorsExams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfessorsExams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfessorsExams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfessorKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfessorsExams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProfessorsExams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProfessorsExams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProfessorsExams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfessorsExams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfessorsExams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProfessorsExams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProfessorsExams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProfessorsExams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProfessorsExams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProfessorsExams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProfessorsExams = fmt.Errorf("proto: unexpected end of group")
)
