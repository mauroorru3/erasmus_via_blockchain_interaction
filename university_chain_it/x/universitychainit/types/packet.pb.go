// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: universitychainit/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UniversitychainitPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*UniversitychainitPacketData_NoData
	//	*UniversitychainitPacketData_ErasmusRestictedDataPacket
	//	*UniversitychainitPacketData_ExtendErasmusPeriodPacket
	//	*UniversitychainitPacketData_FinalErasmusDataPacket
	//	*UniversitychainitPacketData_EndErasmusPeriodRequestPacket
	//	*UniversitychainitPacketData_ErasmusIndexPacket
	//	*UniversitychainitPacketData_ErasmusStudentPacket
	Packet isUniversitychainitPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *UniversitychainitPacketData) Reset()         { *m = UniversitychainitPacketData{} }
func (m *UniversitychainitPacketData) String() string { return proto.CompactTextString(m) }
func (*UniversitychainitPacketData) ProtoMessage()    {}
func (*UniversitychainitPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{0}
}
func (m *UniversitychainitPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniversitychainitPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniversitychainitPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniversitychainitPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniversitychainitPacketData.Merge(m, src)
}
func (m *UniversitychainitPacketData) XXX_Size() int {
	return m.Size()
}
func (m *UniversitychainitPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_UniversitychainitPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_UniversitychainitPacketData proto.InternalMessageInfo

type isUniversitychainitPacketData_Packet interface {
	isUniversitychainitPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UniversitychainitPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type UniversitychainitPacketData_ErasmusRestictedDataPacket struct {
	ErasmusRestictedDataPacket *ErasmusRestictedDataPacketData `protobuf:"bytes,7,opt,name=erasmusRestictedDataPacket,proto3,oneof" json:"erasmusRestictedDataPacket,omitempty"`
}
type UniversitychainitPacketData_ExtendErasmusPeriodPacket struct {
	ExtendErasmusPeriodPacket *ExtendErasmusPeriodPacketData `protobuf:"bytes,6,opt,name=extendErasmusPeriodPacket,proto3,oneof" json:"extendErasmusPeriodPacket,omitempty"`
}
type UniversitychainitPacketData_FinalErasmusDataPacket struct {
	FinalErasmusDataPacket *FinalErasmusDataPacketData `protobuf:"bytes,5,opt,name=finalErasmusDataPacket,proto3,oneof" json:"finalErasmusDataPacket,omitempty"`
}
type UniversitychainitPacketData_EndErasmusPeriodRequestPacket struct {
	EndErasmusPeriodRequestPacket *EndErasmusPeriodRequestPacketData `protobuf:"bytes,4,opt,name=endErasmusPeriodRequestPacket,proto3,oneof" json:"endErasmusPeriodRequestPacket,omitempty"`
}
type UniversitychainitPacketData_ErasmusIndexPacket struct {
	ErasmusIndexPacket *ErasmusIndexPacketData `protobuf:"bytes,3,opt,name=erasmusIndexPacket,proto3,oneof" json:"erasmusIndexPacket,omitempty"`
}
type UniversitychainitPacketData_ErasmusStudentPacket struct {
	ErasmusStudentPacket *ErasmusStudentPacketData `protobuf:"bytes,2,opt,name=erasmusStudentPacket,proto3,oneof" json:"erasmusStudentPacket,omitempty"`
}

func (*UniversitychainitPacketData_NoData) isUniversitychainitPacketData_Packet() {}
func (*UniversitychainitPacketData_ErasmusRestictedDataPacket) isUniversitychainitPacketData_Packet() {
}
func (*UniversitychainitPacketData_ExtendErasmusPeriodPacket) isUniversitychainitPacketData_Packet() {
}
func (*UniversitychainitPacketData_FinalErasmusDataPacket) isUniversitychainitPacketData_Packet() {}
func (*UniversitychainitPacketData_EndErasmusPeriodRequestPacket) isUniversitychainitPacketData_Packet() {
}
func (*UniversitychainitPacketData_ErasmusIndexPacket) isUniversitychainitPacketData_Packet()   {}
func (*UniversitychainitPacketData_ErasmusStudentPacket) isUniversitychainitPacketData_Packet() {}

func (m *UniversitychainitPacketData) GetPacket() isUniversitychainitPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *UniversitychainitPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*UniversitychainitPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *UniversitychainitPacketData) GetErasmusRestictedDataPacket() *ErasmusRestictedDataPacketData {
	if x, ok := m.GetPacket().(*UniversitychainitPacketData_ErasmusRestictedDataPacket); ok {
		return x.ErasmusRestictedDataPacket
	}
	return nil
}

func (m *UniversitychainitPacketData) GetExtendErasmusPeriodPacket() *ExtendErasmusPeriodPacketData {
	if x, ok := m.GetPacket().(*UniversitychainitPacketData_ExtendErasmusPeriodPacket); ok {
		return x.ExtendErasmusPeriodPacket
	}
	return nil
}

func (m *UniversitychainitPacketData) GetFinalErasmusDataPacket() *FinalErasmusDataPacketData {
	if x, ok := m.GetPacket().(*UniversitychainitPacketData_FinalErasmusDataPacket); ok {
		return x.FinalErasmusDataPacket
	}
	return nil
}

func (m *UniversitychainitPacketData) GetEndErasmusPeriodRequestPacket() *EndErasmusPeriodRequestPacketData {
	if x, ok := m.GetPacket().(*UniversitychainitPacketData_EndErasmusPeriodRequestPacket); ok {
		return x.EndErasmusPeriodRequestPacket
	}
	return nil
}

func (m *UniversitychainitPacketData) GetErasmusIndexPacket() *ErasmusIndexPacketData {
	if x, ok := m.GetPacket().(*UniversitychainitPacketData_ErasmusIndexPacket); ok {
		return x.ErasmusIndexPacket
	}
	return nil
}

func (m *UniversitychainitPacketData) GetErasmusStudentPacket() *ErasmusStudentPacketData {
	if x, ok := m.GetPacket().(*UniversitychainitPacketData_ErasmusStudentPacket); ok {
		return x.ErasmusStudentPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UniversitychainitPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UniversitychainitPacketData_NoData)(nil),
		(*UniversitychainitPacketData_ErasmusRestictedDataPacket)(nil),
		(*UniversitychainitPacketData_ExtendErasmusPeriodPacket)(nil),
		(*UniversitychainitPacketData_FinalErasmusDataPacket)(nil),
		(*UniversitychainitPacketData_EndErasmusPeriodRequestPacket)(nil),
		(*UniversitychainitPacketData_ErasmusIndexPacket)(nil),
		(*UniversitychainitPacketData_ErasmusStudentPacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// ErasmusStudentPacketData defines a struct for the packet payload
type ErasmusStudentPacketData struct {
	Student *StoredStudent `protobuf:"bytes,1,opt,name=student,proto3" json:"student,omitempty"`
}

func (m *ErasmusStudentPacketData) Reset()         { *m = ErasmusStudentPacketData{} }
func (m *ErasmusStudentPacketData) String() string { return proto.CompactTextString(m) }
func (*ErasmusStudentPacketData) ProtoMessage()    {}
func (*ErasmusStudentPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{2}
}
func (m *ErasmusStudentPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErasmusStudentPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErasmusStudentPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErasmusStudentPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErasmusStudentPacketData.Merge(m, src)
}
func (m *ErasmusStudentPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ErasmusStudentPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ErasmusStudentPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ErasmusStudentPacketData proto.InternalMessageInfo

func (m *ErasmusStudentPacketData) GetStudent() *StoredStudent {
	if m != nil {
		return m.Student
	}
	return nil
}

// ErasmusStudentPacketAck defines a struct for the packet acknowledgment
type ErasmusStudentPacketAck struct {
	ForeignIndex string `protobuf:"bytes,1,opt,name=foreignIndex,proto3" json:"foreignIndex,omitempty"`
}

func (m *ErasmusStudentPacketAck) Reset()         { *m = ErasmusStudentPacketAck{} }
func (m *ErasmusStudentPacketAck) String() string { return proto.CompactTextString(m) }
func (*ErasmusStudentPacketAck) ProtoMessage()    {}
func (*ErasmusStudentPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{3}
}
func (m *ErasmusStudentPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErasmusStudentPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErasmusStudentPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErasmusStudentPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErasmusStudentPacketAck.Merge(m, src)
}
func (m *ErasmusStudentPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ErasmusStudentPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ErasmusStudentPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ErasmusStudentPacketAck proto.InternalMessageInfo

func (m *ErasmusStudentPacketAck) GetForeignIndex() string {
	if m != nil {
		return m.ForeignIndex
	}
	return ""
}

// ErasmusIndexPacketData defines a struct for the packet payload
type ErasmusIndexPacketData struct {
	Index        string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	ForeignIndex string `protobuf:"bytes,2,opt,name=foreignIndex,proto3" json:"foreignIndex,omitempty"`
}

func (m *ErasmusIndexPacketData) Reset()         { *m = ErasmusIndexPacketData{} }
func (m *ErasmusIndexPacketData) String() string { return proto.CompactTextString(m) }
func (*ErasmusIndexPacketData) ProtoMessage()    {}
func (*ErasmusIndexPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{4}
}
func (m *ErasmusIndexPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErasmusIndexPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErasmusIndexPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErasmusIndexPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErasmusIndexPacketData.Merge(m, src)
}
func (m *ErasmusIndexPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ErasmusIndexPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ErasmusIndexPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ErasmusIndexPacketData proto.InternalMessageInfo

func (m *ErasmusIndexPacketData) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ErasmusIndexPacketData) GetForeignIndex() string {
	if m != nil {
		return m.ForeignIndex
	}
	return ""
}

// ErasmusIndexPacketAck defines a struct for the packet acknowledgment
type ErasmusIndexPacketAck struct {
}

func (m *ErasmusIndexPacketAck) Reset()         { *m = ErasmusIndexPacketAck{} }
func (m *ErasmusIndexPacketAck) String() string { return proto.CompactTextString(m) }
func (*ErasmusIndexPacketAck) ProtoMessage()    {}
func (*ErasmusIndexPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{5}
}
func (m *ErasmusIndexPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErasmusIndexPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErasmusIndexPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErasmusIndexPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErasmusIndexPacketAck.Merge(m, src)
}
func (m *ErasmusIndexPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ErasmusIndexPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ErasmusIndexPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ErasmusIndexPacketAck proto.InternalMessageInfo

// EndErasmusPeriodRequestPacketData defines a struct for the packet payload
type EndErasmusPeriodRequestPacketData struct {
	StartingUniversityName    string `protobuf:"bytes,1,opt,name=startingUniversityName,proto3" json:"startingUniversityName,omitempty"`
	DestinationUniversityName string `protobuf:"bytes,2,opt,name=destinationUniversityName,proto3" json:"destinationUniversityName,omitempty"`
	Index                     string `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
	ForeignIndex              string `protobuf:"bytes,4,opt,name=foreignIndex,proto3" json:"foreignIndex,omitempty"`
}

func (m *EndErasmusPeriodRequestPacketData) Reset()         { *m = EndErasmusPeriodRequestPacketData{} }
func (m *EndErasmusPeriodRequestPacketData) String() string { return proto.CompactTextString(m) }
func (*EndErasmusPeriodRequestPacketData) ProtoMessage()    {}
func (*EndErasmusPeriodRequestPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{6}
}
func (m *EndErasmusPeriodRequestPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndErasmusPeriodRequestPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndErasmusPeriodRequestPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndErasmusPeriodRequestPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndErasmusPeriodRequestPacketData.Merge(m, src)
}
func (m *EndErasmusPeriodRequestPacketData) XXX_Size() int {
	return m.Size()
}
func (m *EndErasmusPeriodRequestPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_EndErasmusPeriodRequestPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_EndErasmusPeriodRequestPacketData proto.InternalMessageInfo

func (m *EndErasmusPeriodRequestPacketData) GetStartingUniversityName() string {
	if m != nil {
		return m.StartingUniversityName
	}
	return ""
}

func (m *EndErasmusPeriodRequestPacketData) GetDestinationUniversityName() string {
	if m != nil {
		return m.DestinationUniversityName
	}
	return ""
}

func (m *EndErasmusPeriodRequestPacketData) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *EndErasmusPeriodRequestPacketData) GetForeignIndex() string {
	if m != nil {
		return m.ForeignIndex
	}
	return ""
}

// EndErasmusPeriodRequestPacketAck defines a struct for the packet acknowledgment
type EndErasmusPeriodRequestPacketAck struct {
	ErasmusData *ErasmusInfo `protobuf:"bytes,1,opt,name=erasmusData,proto3" json:"erasmusData,omitempty"`
}

func (m *EndErasmusPeriodRequestPacketAck) Reset()         { *m = EndErasmusPeriodRequestPacketAck{} }
func (m *EndErasmusPeriodRequestPacketAck) String() string { return proto.CompactTextString(m) }
func (*EndErasmusPeriodRequestPacketAck) ProtoMessage()    {}
func (*EndErasmusPeriodRequestPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{7}
}
func (m *EndErasmusPeriodRequestPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndErasmusPeriodRequestPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndErasmusPeriodRequestPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndErasmusPeriodRequestPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndErasmusPeriodRequestPacketAck.Merge(m, src)
}
func (m *EndErasmusPeriodRequestPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *EndErasmusPeriodRequestPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_EndErasmusPeriodRequestPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_EndErasmusPeriodRequestPacketAck proto.InternalMessageInfo

func (m *EndErasmusPeriodRequestPacketAck) GetErasmusData() *ErasmusInfo {
	if m != nil {
		return m.ErasmusData
	}
	return nil
}

// FinalErasmusDataPacketData defines a struct for the packet payload
type FinalErasmusDataPacketData struct {
	ErasmusData *ErasmusInfo `protobuf:"bytes,1,opt,name=erasmusData,proto3" json:"erasmusData,omitempty"`
	HomeIndex   string       `protobuf:"bytes,2,opt,name=homeIndex,proto3" json:"homeIndex,omitempty"`
}

func (m *FinalErasmusDataPacketData) Reset()         { *m = FinalErasmusDataPacketData{} }
func (m *FinalErasmusDataPacketData) String() string { return proto.CompactTextString(m) }
func (*FinalErasmusDataPacketData) ProtoMessage()    {}
func (*FinalErasmusDataPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{8}
}
func (m *FinalErasmusDataPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalErasmusDataPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalErasmusDataPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalErasmusDataPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalErasmusDataPacketData.Merge(m, src)
}
func (m *FinalErasmusDataPacketData) XXX_Size() int {
	return m.Size()
}
func (m *FinalErasmusDataPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalErasmusDataPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_FinalErasmusDataPacketData proto.InternalMessageInfo

func (m *FinalErasmusDataPacketData) GetErasmusData() *ErasmusInfo {
	if m != nil {
		return m.ErasmusData
	}
	return nil
}

func (m *FinalErasmusDataPacketData) GetHomeIndex() string {
	if m != nil {
		return m.HomeIndex
	}
	return ""
}

// FinalErasmusDataPacketAck defines a struct for the packet acknowledgment
type FinalErasmusDataPacketAck struct {
}

func (m *FinalErasmusDataPacketAck) Reset()         { *m = FinalErasmusDataPacketAck{} }
func (m *FinalErasmusDataPacketAck) String() string { return proto.CompactTextString(m) }
func (*FinalErasmusDataPacketAck) ProtoMessage()    {}
func (*FinalErasmusDataPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{9}
}
func (m *FinalErasmusDataPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalErasmusDataPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalErasmusDataPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalErasmusDataPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalErasmusDataPacketAck.Merge(m, src)
}
func (m *FinalErasmusDataPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *FinalErasmusDataPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalErasmusDataPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_FinalErasmusDataPacketAck proto.InternalMessageInfo

// ExtendErasmusPeriodPacketData defines a struct for the packet payload
type ExtendErasmusPeriodPacketData struct {
	DurationInMonths          uint32 `protobuf:"varint,1,opt,name=durationInMonths,proto3" json:"durationInMonths,omitempty"`
	DestinationUniversityName string `protobuf:"bytes,2,opt,name=destinationUniversityName,proto3" json:"destinationUniversityName,omitempty"`
	ForeignIndex              string `protobuf:"bytes,3,opt,name=foreignIndex,proto3" json:"foreignIndex,omitempty"`
	FinalDate                 string `protobuf:"bytes,4,opt,name=finalDate,proto3" json:"finalDate,omitempty"`
}

func (m *ExtendErasmusPeriodPacketData) Reset()         { *m = ExtendErasmusPeriodPacketData{} }
func (m *ExtendErasmusPeriodPacketData) String() string { return proto.CompactTextString(m) }
func (*ExtendErasmusPeriodPacketData) ProtoMessage()    {}
func (*ExtendErasmusPeriodPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{10}
}
func (m *ExtendErasmusPeriodPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendErasmusPeriodPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendErasmusPeriodPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendErasmusPeriodPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendErasmusPeriodPacketData.Merge(m, src)
}
func (m *ExtendErasmusPeriodPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ExtendErasmusPeriodPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendErasmusPeriodPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendErasmusPeriodPacketData proto.InternalMessageInfo

func (m *ExtendErasmusPeriodPacketData) GetDurationInMonths() uint32 {
	if m != nil {
		return m.DurationInMonths
	}
	return 0
}

func (m *ExtendErasmusPeriodPacketData) GetDestinationUniversityName() string {
	if m != nil {
		return m.DestinationUniversityName
	}
	return ""
}

func (m *ExtendErasmusPeriodPacketData) GetForeignIndex() string {
	if m != nil {
		return m.ForeignIndex
	}
	return ""
}

func (m *ExtendErasmusPeriodPacketData) GetFinalDate() string {
	if m != nil {
		return m.FinalDate
	}
	return ""
}

// ExtendErasmusPeriodPacketAck defines a struct for the packet acknowledgment
type ExtendErasmusPeriodPacketAck struct {
}

func (m *ExtendErasmusPeriodPacketAck) Reset()         { *m = ExtendErasmusPeriodPacketAck{} }
func (m *ExtendErasmusPeriodPacketAck) String() string { return proto.CompactTextString(m) }
func (*ExtendErasmusPeriodPacketAck) ProtoMessage()    {}
func (*ExtendErasmusPeriodPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{11}
}
func (m *ExtendErasmusPeriodPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendErasmusPeriodPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendErasmusPeriodPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendErasmusPeriodPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendErasmusPeriodPacketAck.Merge(m, src)
}
func (m *ExtendErasmusPeriodPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ExtendErasmusPeriodPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendErasmusPeriodPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendErasmusPeriodPacketAck proto.InternalMessageInfo

// ErasmusRestictedDataPacketData defines a struct for the packet payload
type ErasmusRestictedDataPacketData struct {
	ErasmusRestrctedInfo string `protobuf:"bytes,1,opt,name=erasmusRestrctedInfo,proto3" json:"erasmusRestrctedInfo,omitempty"`
}

func (m *ErasmusRestictedDataPacketData) Reset()         { *m = ErasmusRestictedDataPacketData{} }
func (m *ErasmusRestictedDataPacketData) String() string { return proto.CompactTextString(m) }
func (*ErasmusRestictedDataPacketData) ProtoMessage()    {}
func (*ErasmusRestictedDataPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{12}
}
func (m *ErasmusRestictedDataPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErasmusRestictedDataPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErasmusRestictedDataPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErasmusRestictedDataPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErasmusRestictedDataPacketData.Merge(m, src)
}
func (m *ErasmusRestictedDataPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ErasmusRestictedDataPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ErasmusRestictedDataPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ErasmusRestictedDataPacketData proto.InternalMessageInfo

func (m *ErasmusRestictedDataPacketData) GetErasmusRestrctedInfo() string {
	if m != nil {
		return m.ErasmusRestrctedInfo
	}
	return ""
}

// ErasmusRestictedDataPacketAck defines a struct for the packet acknowledgment
type ErasmusRestictedDataPacketAck struct {
}

func (m *ErasmusRestictedDataPacketAck) Reset()         { *m = ErasmusRestictedDataPacketAck{} }
func (m *ErasmusRestictedDataPacketAck) String() string { return proto.CompactTextString(m) }
func (*ErasmusRestictedDataPacketAck) ProtoMessage()    {}
func (*ErasmusRestictedDataPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c790adb4d4f2cf6, []int{13}
}
func (m *ErasmusRestictedDataPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErasmusRestictedDataPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErasmusRestictedDataPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErasmusRestictedDataPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErasmusRestictedDataPacketAck.Merge(m, src)
}
func (m *ErasmusRestictedDataPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ErasmusRestictedDataPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ErasmusRestictedDataPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ErasmusRestictedDataPacketAck proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UniversitychainitPacketData)(nil), "university_chain_it.universitychainit.UniversitychainitPacketData")
	proto.RegisterType((*NoData)(nil), "university_chain_it.universitychainit.NoData")
	proto.RegisterType((*ErasmusStudentPacketData)(nil), "university_chain_it.universitychainit.ErasmusStudentPacketData")
	proto.RegisterType((*ErasmusStudentPacketAck)(nil), "university_chain_it.universitychainit.ErasmusStudentPacketAck")
	proto.RegisterType((*ErasmusIndexPacketData)(nil), "university_chain_it.universitychainit.ErasmusIndexPacketData")
	proto.RegisterType((*ErasmusIndexPacketAck)(nil), "university_chain_it.universitychainit.ErasmusIndexPacketAck")
	proto.RegisterType((*EndErasmusPeriodRequestPacketData)(nil), "university_chain_it.universitychainit.EndErasmusPeriodRequestPacketData")
	proto.RegisterType((*EndErasmusPeriodRequestPacketAck)(nil), "university_chain_it.universitychainit.EndErasmusPeriodRequestPacketAck")
	proto.RegisterType((*FinalErasmusDataPacketData)(nil), "university_chain_it.universitychainit.FinalErasmusDataPacketData")
	proto.RegisterType((*FinalErasmusDataPacketAck)(nil), "university_chain_it.universitychainit.FinalErasmusDataPacketAck")
	proto.RegisterType((*ExtendErasmusPeriodPacketData)(nil), "university_chain_it.universitychainit.ExtendErasmusPeriodPacketData")
	proto.RegisterType((*ExtendErasmusPeriodPacketAck)(nil), "university_chain_it.universitychainit.ExtendErasmusPeriodPacketAck")
	proto.RegisterType((*ErasmusRestictedDataPacketData)(nil), "university_chain_it.universitychainit.ErasmusRestictedDataPacketData")
	proto.RegisterType((*ErasmusRestictedDataPacketAck)(nil), "university_chain_it.universitychainit.ErasmusRestictedDataPacketAck")
}

func init() { proto.RegisterFile("universitychainit/packet.proto", fileDescriptor_8c790adb4d4f2cf6) }

var fileDescriptor_8c790adb4d4f2cf6 = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xfb, 0xe1, 0xb6, 0x53, 0x90, 0xd0, 0xaa, 0xb4, 0x69, 0xda, 0x9a, 0x62, 0x01, 0x42,
	0x48, 0x4d, 0xa5, 0x82, 0x38, 0x51, 0xa1, 0x54, 0x29, 0x6d, 0x0f, 0x44, 0x95, 0x5b, 0x2e, 0x5c,
	0x22, 0x63, 0x6f, 0x9a, 0x25, 0x64, 0x37, 0xd8, 0x6b, 0x94, 0x8a, 0x2b, 0x12, 0xd7, 0xfc, 0x2c,
	0x24, 0x2e, 0x95, 0xb8, 0x70, 0x44, 0xc9, 0xaf, 0xe0, 0x86, 0xbc, 0x1e, 0x70, 0x1a, 0x7f, 0xe0,
	0x08, 0x71, 0x6b, 0x77, 0x67, 0xde, 0x7b, 0x33, 0x6f, 0x67, 0x62, 0x30, 0x02, 0xce, 0x3e, 0x50,
	0xcf, 0x67, 0xf2, 0xd2, 0x69, 0xdb, 0x8c, 0x33, 0xb9, 0xdb, 0xb3, 0x9d, 0x0e, 0x95, 0xd5, 0x9e,
	0x27, 0xa4, 0x20, 0xf7, 0xe3, 0xfb, 0xa6, 0x0a, 0x68, 0x32, 0x59, 0x4d, 0xe4, 0x54, 0xee, 0x25,
	0x61, 0xa8, 0x67, 0xfb, 0xdd, 0xc0, 0x6f, 0x32, 0xde, 0x12, 0x11, 0x58, 0xe5, 0x41, 0x32, 0xca,
	0x97, 0xc2, 0xa3, 0x6e, 0xd3, 0x97, 0x81, 0x4b, 0x39, 0x92, 0x9a, 0x3f, 0x75, 0xd8, 0x78, 0x35,
	0x19, 0x7a, 0xaa, 0x64, 0xd5, 0x6d, 0x69, 0x93, 0x23, 0xd0, 0xb9, 0x08, 0xff, 0x2a, 0x6b, 0xdb,
	0xda, 0xc3, 0xe5, 0xbd, 0x9d, 0x6a, 0x21, 0x95, 0xd5, 0x86, 0x4a, 0x3a, 0x2e, 0x59, 0x98, 0x4e,
	0x3e, 0x6b, 0x50, 0x41, 0x9d, 0x16, 0xf5, 0x25, 0x73, 0x24, 0x75, 0xc3, 0x8b, 0x88, 0xab, 0xbc,
	0xa0, 0xd0, 0x0f, 0x0b, 0xa2, 0x1f, 0x66, 0x02, 0x21, 0x6b, 0x0e, 0x15, 0xf9, 0xa4, 0xc1, 0x3a,
	0xed, 0x4b, 0xca, 0x5d, 0x84, 0x39, 0xa5, 0x1e, 0x13, 0x2e, 0x0a, 0xd1, 0x95, 0x90, 0x7a, 0x51,
	0x21, 0x59, 0x38, 0xa8, 0x23, 0x9b, 0x88, 0x7c, 0x84, 0xd5, 0x16, 0xe3, 0xf6, 0x3b, 0xbc, 0x1b,
	0xeb, 0xc5, 0xbc, 0x92, 0x50, 0x2b, 0x28, 0xe1, 0x45, 0x2a, 0x08, 0xf2, 0x67, 0x50, 0x90, 0x81,
	0x06, 0x5b, 0x93, 0xba, 0x2c, 0xfa, 0x3e, 0xa0, 0x3e, 0x9a, 0x5f, 0x9e, 0x53, 0x22, 0x8e, 0x8b,
	0xf6, 0x21, 0x0f, 0x0b, 0xb5, 0xe4, 0x13, 0x12, 0x01, 0x04, 0x4d, 0x3b, 0xe1, 0x2e, 0xed, 0xa3,
	0x8c, 0x59, 0x25, 0x63, 0x7f, 0xba, 0x77, 0x31, 0x06, 0x80, 0xdc, 0x29, 0xd0, 0x24, 0x80, 0x15,
	0x3c, 0x3d, 0x8b, 0x46, 0x02, 0x29, 0x67, 0x14, 0xe5, 0xf3, 0xe9, 0x28, 0xaf, 0x41, 0x20, 0x69,
	0x2a, 0xfc, 0xc1, 0x22, 0xe8, 0xd1, 0xd8, 0x9b, 0x8b, 0xa0, 0x47, 0x63, 0x62, 0xbe, 0x85, 0x72,
	0x16, 0x0e, 0x69, 0xc0, 0x02, 0x8e, 0x2c, 0x8e, 0xe0, 0x93, 0x82, 0xca, 0xce, 0xd4, 0xbc, 0x23,
	0xa0, 0xf5, 0x1b, 0xc4, 0xdc, 0x87, 0xb5, 0x34, 0xae, 0x9a, 0xd3, 0x21, 0x26, 0xdc, 0x68, 0x09,
	0x8f, 0xb2, 0x0b, 0xae, 0xfa, 0xa4, 0xf8, 0x96, 0xac, 0x6b, 0x67, 0xa6, 0x05, 0xab, 0xe9, 0x5d,
	0x26, 0x2b, 0x30, 0xcf, 0xc6, 0xd2, 0xa2, 0x7f, 0x12, 0x98, 0x33, 0x29, 0x98, 0x6b, 0x70, 0x3b,
	0x89, 0x59, 0x73, 0x3a, 0xe6, 0x37, 0x0d, 0xee, 0xfe, 0xf5, 0x69, 0x91, 0xa7, 0xb0, 0xea, 0x4b,
	0xdb, 0x93, 0x8c, 0x5f, 0xc4, 0xab, 0xac, 0x61, 0x77, 0x29, 0x2a, 0xc9, 0xb8, 0x25, 0xcf, 0x60,
	0xdd, 0x0d, 0xf7, 0x03, 0xb7, 0x25, 0x13, 0x7c, 0x22, 0x35, 0xd2, 0x99, 0x1d, 0x10, 0x97, 0x3b,
	0x9b, 0x57, 0xee, 0x5c, 0x4a, 0xb9, 0x7d, 0xd8, 0xce, 0x2d, 0x2a, 0xb4, 0xe2, 0x1c, 0x96, 0x69,
	0x3c, 0xb5, 0xe8, 0xfc, 0xde, 0xb4, 0x63, 0xd0, 0x12, 0xd6, 0x38, 0x8c, 0x39, 0xd0, 0xa0, 0x92,
	0xbd, 0x2f, 0xfe, 0x0f, 0x29, 0xd9, 0x84, 0xa5, 0xb6, 0xe8, 0xd2, 0x71, 0xfb, 0xe3, 0x03, 0x73,
	0x03, 0xd6, 0xd3, 0x15, 0x85, 0xfe, 0x7f, 0xd5, 0x60, 0x2b, 0x77, 0xc5, 0x92, 0x47, 0x70, 0xcb,
	0x0d, 0x3c, 0xe5, 0xcf, 0x09, 0x7f, 0x29, 0xb8, 0x6c, 0xfb, 0x4a, 0xf7, 0x4d, 0x2b, 0x71, 0xfe,
	0x8f, 0x7e, 0x4f, 0x3a, 0x3b, 0x9b, 0x74, 0x36, 0x2c, 0x55, 0x2d, 0xdc, 0xba, 0x2d, 0x29, 0x5a,
	0x1f, 0x1f, 0x98, 0x06, 0x6c, 0x66, 0x16, 0x13, 0x56, 0x7b, 0x0e, 0x46, 0xfe, 0x0f, 0x1b, 0xd9,
	0xfb, 0xb3, 0xb2, 0xc2, 0x08, 0x2f, 0x8c, 0x08, 0xfb, 0x8d, 0xef, 0x3c, 0xf5, 0xce, 0xbc, 0x03,
	0x5b, 0xd9, 0xa8, 0x35, 0xa7, 0x73, 0x70, 0xf4, 0x65, 0x68, 0x68, 0x57, 0x43, 0x43, 0xfb, 0x31,
	0x34, 0xb4, 0xc1, 0xc8, 0x28, 0x5d, 0x8d, 0x8c, 0xd2, 0xf7, 0x91, 0x51, 0x7a, 0xbd, 0x93, 0xe2,
	0xfc, 0x6e, 0x7f, 0x37, 0xf9, 0x69, 0x21, 0x2f, 0x7b, 0xd4, 0x7f, 0xa3, 0xab, 0x4f, 0x8a, 0xc7,
	0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xc2, 0x4d, 0x7a, 0xe9, 0x08, 0x00, 0x00,
}

func (m *UniversitychainitPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniversitychainitPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversitychainitPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UniversitychainitPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversitychainitPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *UniversitychainitPacketData_ErasmusStudentPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversitychainitPacketData_ErasmusStudentPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ErasmusStudentPacket != nil {
		{
			size, err := m.ErasmusStudentPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UniversitychainitPacketData_ErasmusIndexPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversitychainitPacketData_ErasmusIndexPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ErasmusIndexPacket != nil {
		{
			size, err := m.ErasmusIndexPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *UniversitychainitPacketData_EndErasmusPeriodRequestPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversitychainitPacketData_EndErasmusPeriodRequestPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EndErasmusPeriodRequestPacket != nil {
		{
			size, err := m.EndErasmusPeriodRequestPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *UniversitychainitPacketData_FinalErasmusDataPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversitychainitPacketData_FinalErasmusDataPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FinalErasmusDataPacket != nil {
		{
			size, err := m.FinalErasmusDataPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *UniversitychainitPacketData_ExtendErasmusPeriodPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversitychainitPacketData_ExtendErasmusPeriodPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExtendErasmusPeriodPacket != nil {
		{
			size, err := m.ExtendErasmusPeriodPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *UniversitychainitPacketData_ErasmusRestictedDataPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversitychainitPacketData_ErasmusRestictedDataPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ErasmusRestictedDataPacket != nil {
		{
			size, err := m.ErasmusRestictedDataPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ErasmusStudentPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErasmusStudentPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErasmusStudentPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Student != nil {
		{
			size, err := m.Student.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErasmusStudentPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErasmusStudentPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErasmusStudentPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForeignIndex) > 0 {
		i -= len(m.ForeignIndex)
		copy(dAtA[i:], m.ForeignIndex)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ForeignIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErasmusIndexPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErasmusIndexPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErasmusIndexPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForeignIndex) > 0 {
		i -= len(m.ForeignIndex)
		copy(dAtA[i:], m.ForeignIndex)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ForeignIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErasmusIndexPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErasmusIndexPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErasmusIndexPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EndErasmusPeriodRequestPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndErasmusPeriodRequestPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndErasmusPeriodRequestPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForeignIndex) > 0 {
		i -= len(m.ForeignIndex)
		copy(dAtA[i:], m.ForeignIndex)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ForeignIndex)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationUniversityName) > 0 {
		i -= len(m.DestinationUniversityName)
		copy(dAtA[i:], m.DestinationUniversityName)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DestinationUniversityName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartingUniversityName) > 0 {
		i -= len(m.StartingUniversityName)
		copy(dAtA[i:], m.StartingUniversityName)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.StartingUniversityName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndErasmusPeriodRequestPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndErasmusPeriodRequestPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndErasmusPeriodRequestPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ErasmusData != nil {
		{
			size, err := m.ErasmusData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinalErasmusDataPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalErasmusDataPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalErasmusDataPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HomeIndex) > 0 {
		i -= len(m.HomeIndex)
		copy(dAtA[i:], m.HomeIndex)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.HomeIndex)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErasmusData != nil {
		{
			size, err := m.ErasmusData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinalErasmusDataPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalErasmusDataPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalErasmusDataPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ExtendErasmusPeriodPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendErasmusPeriodPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendErasmusPeriodPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinalDate) > 0 {
		i -= len(m.FinalDate)
		copy(dAtA[i:], m.FinalDate)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.FinalDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ForeignIndex) > 0 {
		i -= len(m.ForeignIndex)
		copy(dAtA[i:], m.ForeignIndex)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ForeignIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationUniversityName) > 0 {
		i -= len(m.DestinationUniversityName)
		copy(dAtA[i:], m.DestinationUniversityName)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DestinationUniversityName)))
		i--
		dAtA[i] = 0x12
	}
	if m.DurationInMonths != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.DurationInMonths))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExtendErasmusPeriodPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendErasmusPeriodPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendErasmusPeriodPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ErasmusRestictedDataPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErasmusRestictedDataPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErasmusRestictedDataPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErasmusRestrctedInfo) > 0 {
		i -= len(m.ErasmusRestrctedInfo)
		copy(dAtA[i:], m.ErasmusRestrctedInfo)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ErasmusRestrctedInfo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErasmusRestictedDataPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErasmusRestictedDataPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErasmusRestictedDataPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UniversitychainitPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *UniversitychainitPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *UniversitychainitPacketData_ErasmusStudentPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErasmusStudentPacket != nil {
		l = m.ErasmusStudentPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *UniversitychainitPacketData_ErasmusIndexPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErasmusIndexPacket != nil {
		l = m.ErasmusIndexPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *UniversitychainitPacketData_EndErasmusPeriodRequestPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndErasmusPeriodRequestPacket != nil {
		l = m.EndErasmusPeriodRequestPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *UniversitychainitPacketData_FinalErasmusDataPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FinalErasmusDataPacket != nil {
		l = m.FinalErasmusDataPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *UniversitychainitPacketData_ExtendErasmusPeriodPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtendErasmusPeriodPacket != nil {
		l = m.ExtendErasmusPeriodPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *UniversitychainitPacketData_ErasmusRestictedDataPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErasmusRestictedDataPacket != nil {
		l = m.ErasmusRestictedDataPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ErasmusStudentPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Student != nil {
		l = m.Student.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ErasmusStudentPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ForeignIndex)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ErasmusIndexPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ForeignIndex)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ErasmusIndexPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EndErasmusPeriodRequestPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartingUniversityName)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.DestinationUniversityName)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ForeignIndex)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *EndErasmusPeriodRequestPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErasmusData != nil {
		l = m.ErasmusData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *FinalErasmusDataPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErasmusData != nil {
		l = m.ErasmusData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.HomeIndex)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *FinalErasmusDataPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExtendErasmusPeriodPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DurationInMonths != 0 {
		n += 1 + sovPacket(uint64(m.DurationInMonths))
	}
	l = len(m.DestinationUniversityName)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ForeignIndex)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.FinalDate)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ExtendErasmusPeriodPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ErasmusRestictedDataPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErasmusRestrctedInfo)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ErasmusRestictedDataPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UniversitychainitPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniversitychainitPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniversitychainitPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &UniversitychainitPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErasmusStudentPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErasmusStudentPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &UniversitychainitPacketData_ErasmusStudentPacket{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErasmusIndexPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErasmusIndexPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &UniversitychainitPacketData_ErasmusIndexPacket{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndErasmusPeriodRequestPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EndErasmusPeriodRequestPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &UniversitychainitPacketData_EndErasmusPeriodRequestPacket{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalErasmusDataPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FinalErasmusDataPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &UniversitychainitPacketData_FinalErasmusDataPacket{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendErasmusPeriodPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExtendErasmusPeriodPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &UniversitychainitPacketData_ExtendErasmusPeriodPacket{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErasmusRestictedDataPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErasmusRestictedDataPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &UniversitychainitPacketData_ErasmusRestictedDataPacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErasmusStudentPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErasmusStudentPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErasmusStudentPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Student == nil {
				m.Student = &StoredStudent{}
			}
			if err := m.Student.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErasmusStudentPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErasmusStudentPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErasmusStudentPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErasmusIndexPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErasmusIndexPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErasmusIndexPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErasmusIndexPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErasmusIndexPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErasmusIndexPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndErasmusPeriodRequestPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndErasmusPeriodRequestPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndErasmusPeriodRequestPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingUniversityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartingUniversityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationUniversityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationUniversityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndErasmusPeriodRequestPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndErasmusPeriodRequestPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndErasmusPeriodRequestPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErasmusData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErasmusData == nil {
				m.ErasmusData = &ErasmusInfo{}
			}
			if err := m.ErasmusData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalErasmusDataPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalErasmusDataPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalErasmusDataPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErasmusData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErasmusData == nil {
				m.ErasmusData = &ErasmusInfo{}
			}
			if err := m.ErasmusData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalErasmusDataPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalErasmusDataPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalErasmusDataPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendErasmusPeriodPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendErasmusPeriodPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendErasmusPeriodPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationInMonths", wireType)
			}
			m.DurationInMonths = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationInMonths |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationUniversityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationUniversityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendErasmusPeriodPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendErasmusPeriodPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendErasmusPeriodPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErasmusRestictedDataPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErasmusRestictedDataPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErasmusRestictedDataPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErasmusRestrctedInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErasmusRestrctedInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErasmusRestictedDataPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErasmusRestictedDataPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErasmusRestictedDataPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
