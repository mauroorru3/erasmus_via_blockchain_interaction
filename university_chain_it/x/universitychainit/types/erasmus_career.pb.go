// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: universitychainit/erasmus_career.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErasmusCareer struct {
	Id                         uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DurationInMonths           uint64               `protobuf:"varint,2,opt,name=durationInMonths,proto3" json:"durationInMonths,omitempty"`
	StartDate                  string               `protobuf:"bytes,3,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate                    string               `protobuf:"bytes,4,opt,name=endDate,proto3" json:"endDate,omitempty"`
	ErasmusType                uint64               `protobuf:"varint,5,opt,name=erasmusType,proto3" json:"erasmusType,omitempty"`
	TotalCredits               uint64               `protobuf:"varint,6,opt,name=totalCredits,proto3" json:"totalCredits,omitempty"`
	AchievedCredits            uint64               `protobuf:"varint,7,opt,name=achievedCredits,proto3" json:"achievedCredits,omitempty"`
	TotalExams                 uint64               `protobuf:"varint,8,opt,name=totalExams,proto3" json:"totalExams,omitempty"`
	ExamsPassed                uint64               `protobuf:"varint,9,opt,name=examsPassed,proto3" json:"examsPassed,omitempty"`
	ForeignUniversityName      string               `protobuf:"bytes,10,opt,name=foreignUniversityName,proto3" json:"foreignUniversityName,omitempty"`
	ForeignUniversityCountry   string               `protobuf:"bytes,11,opt,name=foreignUniversityCountry,proto3" json:"foreignUniversityCountry,omitempty"`
	ForeignUniversityStudentId string               `protobuf:"bytes,12,opt,name=foreignUniversityStudentId,proto3" json:"foreignUniversityStudentId,omitempty"`
	Status                     string               `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	Contribution               *ErasmusContribution `protobuf:"bytes,14,opt,name=contribution,proto3" json:"contribution,omitempty"`
	ExamsData                  *ErasmusExams        `protobuf:"bytes,15,opt,name=examsData,proto3" json:"examsData,omitempty"`
}

func (m *ErasmusCareer) Reset()         { *m = ErasmusCareer{} }
func (m *ErasmusCareer) String() string { return proto.CompactTextString(m) }
func (*ErasmusCareer) ProtoMessage()    {}
func (*ErasmusCareer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28aa2a5b57a27ec, []int{0}
}
func (m *ErasmusCareer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErasmusCareer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErasmusCareer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErasmusCareer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErasmusCareer.Merge(m, src)
}
func (m *ErasmusCareer) XXX_Size() int {
	return m.Size()
}
func (m *ErasmusCareer) XXX_DiscardUnknown() {
	xxx_messageInfo_ErasmusCareer.DiscardUnknown(m)
}

var xxx_messageInfo_ErasmusCareer proto.InternalMessageInfo

func (m *ErasmusCareer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ErasmusCareer) GetDurationInMonths() uint64 {
	if m != nil {
		return m.DurationInMonths
	}
	return 0
}

func (m *ErasmusCareer) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *ErasmusCareer) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *ErasmusCareer) GetErasmusType() uint64 {
	if m != nil {
		return m.ErasmusType
	}
	return 0
}

func (m *ErasmusCareer) GetTotalCredits() uint64 {
	if m != nil {
		return m.TotalCredits
	}
	return 0
}

func (m *ErasmusCareer) GetAchievedCredits() uint64 {
	if m != nil {
		return m.AchievedCredits
	}
	return 0
}

func (m *ErasmusCareer) GetTotalExams() uint64 {
	if m != nil {
		return m.TotalExams
	}
	return 0
}

func (m *ErasmusCareer) GetExamsPassed() uint64 {
	if m != nil {
		return m.ExamsPassed
	}
	return 0
}

func (m *ErasmusCareer) GetForeignUniversityName() string {
	if m != nil {
		return m.ForeignUniversityName
	}
	return ""
}

func (m *ErasmusCareer) GetForeignUniversityCountry() string {
	if m != nil {
		return m.ForeignUniversityCountry
	}
	return ""
}

func (m *ErasmusCareer) GetForeignUniversityStudentId() string {
	if m != nil {
		return m.ForeignUniversityStudentId
	}
	return ""
}

func (m *ErasmusCareer) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ErasmusCareer) GetContribution() *ErasmusContribution {
	if m != nil {
		return m.Contribution
	}
	return nil
}

func (m *ErasmusCareer) GetExamsData() *ErasmusExams {
	if m != nil {
		return m.ExamsData
	}
	return nil
}

func init() {
	proto.RegisterType((*ErasmusCareer)(nil), "university_chain_it.universitychainit.ErasmusCareer")
}

func init() {
	proto.RegisterFile("universitychainit/erasmus_career.proto", fileDescriptor_d28aa2a5b57a27ec)
}

var fileDescriptor_d28aa2a5b57a27ec = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0xb3, 0xb1, 0x4d, 0xcd, 0x4b, 0xda, 0xca, 0x80, 0x32, 0x04, 0x59, 0x42, 0xa1, 0x12,
	0x44, 0x37, 0x60, 0x3d, 0xf5, 0xe0, 0xc1, 0xb4, 0x48, 0x0f, 0x8a, 0xae, 0x7a, 0xf1, 0x60, 0x98,
	0x66, 0x9e, 0x66, 0xc0, 0xcc, 0x84, 0x99, 0xb7, 0xa5, 0xfb, 0x2d, 0xfc, 0x2c, 0x7e, 0x0a, 0x8f,
	0x3d, 0x7a, 0x94, 0xe4, 0x8b, 0x48, 0x5e, 0x12, 0x77, 0xeb, 0xb6, 0xc5, 0xde, 0x76, 0xfe, 0xff,
	0xff, 0xfb, 0xf1, 0xf6, 0xcd, 0x1b, 0x78, 0x94, 0x59, 0x73, 0x86, 0x3e, 0x18, 0xca, 0x47, 0x63,
	0x65, 0xac, 0xa1, 0x3e, 0x7a, 0x15, 0x26, 0x59, 0x18, 0x8e, 0x94, 0x47, 0xf4, 0xc9, 0xd4, 0x3b,
	0x72, 0x62, 0xbf, 0xc8, 0x0d, 0x39, 0x38, 0x34, 0x94, 0x54, 0x6a, 0x3b, 0x4f, 0x6e, 0xc0, 0x39,
	0x4b, 0xde, 0x9c, 0x66, 0x64, 0x9c, 0x5d, 0x42, 0x3b, 0xfb, 0xd7, 0xa7, 0xf1, 0x5c, 0x4d, 0xc2,
	0x32, 0xb6, 0xf7, 0x63, 0x13, 0xb6, 0x8f, 0x97, 0xfa, 0x80, 0x7b, 0x12, 0x3b, 0x50, 0x37, 0x5a,
	0x46, 0xdd, 0xa8, 0xb7, 0x91, 0xd6, 0x8d, 0x16, 0x8f, 0xe1, 0x9e, 0xce, 0xbc, 0x5a, 0xa0, 0x4f,
	0xec, 0x6b, 0x67, 0x69, 0x1c, 0x64, 0x9d, 0xdd, 0x8a, 0x2e, 0x1e, 0x42, 0x33, 0x90, 0xf2, 0x74,
	0xa4, 0x08, 0xe5, 0x9d, 0x6e, 0xd4, 0x6b, 0xa6, 0x85, 0x20, 0x24, 0x6c, 0xa1, 0xd5, 0xec, 0x6d,
	0xb0, 0xb7, 0x3e, 0x8a, 0x2e, 0xb4, 0x56, 0xcd, 0x7d, 0xc8, 0xa7, 0x28, 0x37, 0x19, 0x5f, 0x96,
	0xc4, 0x1e, 0xb4, 0xc9, 0x91, 0xfa, 0x36, 0xf0, 0xa8, 0x0d, 0x05, 0xd9, 0xe0, 0xc8, 0x25, 0x4d,
	0xf4, 0x60, 0x57, 0x8d, 0xc6, 0x06, 0xcf, 0x50, 0xaf, 0x63, 0x5b, 0x1c, 0xfb, 0x57, 0x16, 0x31,
	0x00, 0x57, 0x1e, 0x2f, 0x26, 0x21, 0xef, 0x72, 0xa8, 0xa4, 0x70, 0x3f, 0x8b, 0x8f, 0xb7, 0x2a,
	0x04, 0xd4, 0xb2, 0xb9, 0xea, 0xa7, 0x90, 0xc4, 0x73, 0xb8, 0xff, 0xc5, 0x79, 0x34, 0x5f, 0xed,
	0xc7, 0xbf, 0x73, 0x7e, 0xa3, 0x26, 0x28, 0x81, 0xff, 0xec, 0x6a, 0x53, 0x1c, 0x82, 0xac, 0x18,
	0x03, 0x97, 0x59, 0xf2, 0xb9, 0x6c, 0x71, 0xe1, 0xb5, 0xbe, 0x78, 0x01, 0x9d, 0x8a, 0xf7, 0x9e,
	0x32, 0x8d, 0x96, 0x4e, 0xb4, 0x6c, 0x73, 0xf5, 0x0d, 0x09, 0xf1, 0x00, 0x1a, 0x81, 0x14, 0x65,
	0x41, 0x6e, 0x73, 0x76, 0x75, 0x12, 0x9f, 0xa1, 0x5d, 0x5e, 0x1f, 0xb9, 0xd3, 0x8d, 0x7a, 0xad,
	0x67, 0x87, 0xc9, 0x7f, 0x2d, 0x65, 0xb2, 0xde, 0x9d, 0x12, 0x21, 0xbd, 0xc4, 0x13, 0xef, 0xa0,
	0xc9, 0x83, 0x3b, 0x52, 0xa4, 0xe4, 0x2e, 0xc3, 0x0f, 0x6e, 0x07, 0xe7, 0x3b, 0x49, 0x0b, 0xca,
	0xcb, 0x57, 0x3f, 0x67, 0x71, 0x74, 0x31, 0x8b, 0xa3, 0xdf, 0xb3, 0x38, 0xfa, 0x3e, 0x8f, 0x6b,
	0x17, 0xf3, 0xb8, 0xf6, 0x6b, 0x1e, 0xd7, 0x3e, 0x3d, 0xbd, 0x02, 0xdc, 0x3f, 0xef, 0x57, 0xdf,
	0x02, 0xe5, 0x53, 0x0c, 0xa7, 0x0d, 0x7e, 0x04, 0x07, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x31,
	0x1c, 0x8a, 0x35, 0xaa, 0x03, 0x00, 0x00,
}

func (m *ErasmusCareer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErasmusCareer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErasmusCareer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExamsData != nil {
		{
			size, err := m.ExamsData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintErasmusCareer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Contribution != nil {
		{
			size, err := m.Contribution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintErasmusCareer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintErasmusCareer(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ForeignUniversityStudentId) > 0 {
		i -= len(m.ForeignUniversityStudentId)
		copy(dAtA[i:], m.ForeignUniversityStudentId)
		i = encodeVarintErasmusCareer(dAtA, i, uint64(len(m.ForeignUniversityStudentId)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ForeignUniversityCountry) > 0 {
		i -= len(m.ForeignUniversityCountry)
		copy(dAtA[i:], m.ForeignUniversityCountry)
		i = encodeVarintErasmusCareer(dAtA, i, uint64(len(m.ForeignUniversityCountry)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ForeignUniversityName) > 0 {
		i -= len(m.ForeignUniversityName)
		copy(dAtA[i:], m.ForeignUniversityName)
		i = encodeVarintErasmusCareer(dAtA, i, uint64(len(m.ForeignUniversityName)))
		i--
		dAtA[i] = 0x52
	}
	if m.ExamsPassed != 0 {
		i = encodeVarintErasmusCareer(dAtA, i, uint64(m.ExamsPassed))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalExams != 0 {
		i = encodeVarintErasmusCareer(dAtA, i, uint64(m.TotalExams))
		i--
		dAtA[i] = 0x40
	}
	if m.AchievedCredits != 0 {
		i = encodeVarintErasmusCareer(dAtA, i, uint64(m.AchievedCredits))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalCredits != 0 {
		i = encodeVarintErasmusCareer(dAtA, i, uint64(m.TotalCredits))
		i--
		dAtA[i] = 0x30
	}
	if m.ErasmusType != 0 {
		i = encodeVarintErasmusCareer(dAtA, i, uint64(m.ErasmusType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EndDate) > 0 {
		i -= len(m.EndDate)
		copy(dAtA[i:], m.EndDate)
		i = encodeVarintErasmusCareer(dAtA, i, uint64(len(m.EndDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StartDate) > 0 {
		i -= len(m.StartDate)
		copy(dAtA[i:], m.StartDate)
		i = encodeVarintErasmusCareer(dAtA, i, uint64(len(m.StartDate)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DurationInMonths != 0 {
		i = encodeVarintErasmusCareer(dAtA, i, uint64(m.DurationInMonths))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintErasmusCareer(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintErasmusCareer(dAtA []byte, offset int, v uint64) int {
	offset -= sovErasmusCareer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ErasmusCareer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovErasmusCareer(uint64(m.Id))
	}
	if m.DurationInMonths != 0 {
		n += 1 + sovErasmusCareer(uint64(m.DurationInMonths))
	}
	l = len(m.StartDate)
	if l > 0 {
		n += 1 + l + sovErasmusCareer(uint64(l))
	}
	l = len(m.EndDate)
	if l > 0 {
		n += 1 + l + sovErasmusCareer(uint64(l))
	}
	if m.ErasmusType != 0 {
		n += 1 + sovErasmusCareer(uint64(m.ErasmusType))
	}
	if m.TotalCredits != 0 {
		n += 1 + sovErasmusCareer(uint64(m.TotalCredits))
	}
	if m.AchievedCredits != 0 {
		n += 1 + sovErasmusCareer(uint64(m.AchievedCredits))
	}
	if m.TotalExams != 0 {
		n += 1 + sovErasmusCareer(uint64(m.TotalExams))
	}
	if m.ExamsPassed != 0 {
		n += 1 + sovErasmusCareer(uint64(m.ExamsPassed))
	}
	l = len(m.ForeignUniversityName)
	if l > 0 {
		n += 1 + l + sovErasmusCareer(uint64(l))
	}
	l = len(m.ForeignUniversityCountry)
	if l > 0 {
		n += 1 + l + sovErasmusCareer(uint64(l))
	}
	l = len(m.ForeignUniversityStudentId)
	if l > 0 {
		n += 1 + l + sovErasmusCareer(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovErasmusCareer(uint64(l))
	}
	if m.Contribution != nil {
		l = m.Contribution.Size()
		n += 1 + l + sovErasmusCareer(uint64(l))
	}
	if m.ExamsData != nil {
		l = m.ExamsData.Size()
		n += 1 + l + sovErasmusCareer(uint64(l))
	}
	return n
}

func sovErasmusCareer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErasmusCareer(x uint64) (n int) {
	return sovErasmusCareer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ErasmusCareer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErasmusCareer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErasmusCareer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErasmusCareer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationInMonths", wireType)
			}
			m.DurationInMonths = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationInMonths |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErasmusType", wireType)
			}
			m.ErasmusType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErasmusType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCredits", wireType)
			}
			m.TotalCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievedCredits", wireType)
			}
			m.AchievedCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievedCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalExams", wireType)
			}
			m.TotalExams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalExams |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamsPassed", wireType)
			}
			m.ExamsPassed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExamsPassed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignUniversityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignUniversityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignUniversityCountry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignUniversityCountry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignUniversityStudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignUniversityStudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contribution == nil {
				m.Contribution = &ErasmusContribution{}
			}
			if err := m.Contribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExamsData == nil {
				m.ExamsData = &ErasmusExams{}
			}
			if err := m.ExamsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErasmusCareer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthErasmusCareer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErasmusCareer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErasmusCareer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErasmusCareer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErasmusCareer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupErasmusCareer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthErasmusCareer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthErasmusCareer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErasmusCareer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupErasmusCareer = fmt.Errorf("proto: unexpected end of group")
)
