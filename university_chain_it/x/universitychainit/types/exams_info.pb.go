// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: universitychainit/exams_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExamsInfo struct {
	ExamName       string `protobuf:"bytes,1,opt,name=examName,proto3" json:"examName,omitempty"`
	ExamLabel      string `protobuf:"bytes,2,opt,name=examLabel,proto3" json:"examLabel,omitempty"`
	ExamDate       string `protobuf:"bytes,3,opt,name=examDate,proto3" json:"examDate,omitempty"`
	Credits        uint64 `protobuf:"varint,4,opt,name=credits,proto3" json:"credits,omitempty"`
	Marks          uint64 `protobuf:"varint,5,opt,name=marks,proto3" json:"marks,omitempty"`
	CourseYear     uint64 `protobuf:"varint,6,opt,name=courseYear,proto3" json:"courseYear,omitempty"`
	Status         bool   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	AttendanceYear uint64 `protobuf:"varint,8,opt,name=attendanceYear,proto3" json:"attendanceYear,omitempty"`
	ExamType       uint64 `protobuf:"varint,9,opt,name=examType,proto3" json:"examType,omitempty"`
	CourseOfStudy  string `protobuf:"bytes,10,opt,name=courseOfStudy,proto3" json:"courseOfStudy,omitempty"`
}

func (m *ExamsInfo) Reset()         { *m = ExamsInfo{} }
func (m *ExamsInfo) String() string { return proto.CompactTextString(m) }
func (*ExamsInfo) ProtoMessage()    {}
func (*ExamsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0fe6f1be5198d63, []int{0}
}
func (m *ExamsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExamsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExamsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExamsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExamsInfo.Merge(m, src)
}
func (m *ExamsInfo) XXX_Size() int {
	return m.Size()
}
func (m *ExamsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExamsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExamsInfo proto.InternalMessageInfo

func (m *ExamsInfo) GetExamName() string {
	if m != nil {
		return m.ExamName
	}
	return ""
}

func (m *ExamsInfo) GetExamLabel() string {
	if m != nil {
		return m.ExamLabel
	}
	return ""
}

func (m *ExamsInfo) GetExamDate() string {
	if m != nil {
		return m.ExamDate
	}
	return ""
}

func (m *ExamsInfo) GetCredits() uint64 {
	if m != nil {
		return m.Credits
	}
	return 0
}

func (m *ExamsInfo) GetMarks() uint64 {
	if m != nil {
		return m.Marks
	}
	return 0
}

func (m *ExamsInfo) GetCourseYear() uint64 {
	if m != nil {
		return m.CourseYear
	}
	return 0
}

func (m *ExamsInfo) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *ExamsInfo) GetAttendanceYear() uint64 {
	if m != nil {
		return m.AttendanceYear
	}
	return 0
}

func (m *ExamsInfo) GetExamType() uint64 {
	if m != nil {
		return m.ExamType
	}
	return 0
}

func (m *ExamsInfo) GetCourseOfStudy() string {
	if m != nil {
		return m.CourseOfStudy
	}
	return ""
}

func init() {
	proto.RegisterType((*ExamsInfo)(nil), "university_chain_it.universitychainit.ExamsInfo")
}

func init() {
	proto.RegisterFile("universitychainit/exams_info.proto", fileDescriptor_d0fe6f1be5198d63)
}

var fileDescriptor_d0fe6f1be5198d63 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x86, 0x3b, 0xfd, 0xfa, 0x97, 0x03, 0x9f, 0x8b, 0x41, 0x64, 0x10, 0x19, 0x4a, 0x51, 0xe9,
	0xc6, 0x76, 0xe1, 0x1d, 0x88, 0x22, 0x82, 0x28, 0x54, 0x37, 0xba, 0x29, 0xd3, 0x64, 0x82, 0x83,
	0x66, 0x12, 0x66, 0x4e, 0xa4, 0xb9, 0x0b, 0xef, 0xc5, 0x9b, 0x70, 0xd9, 0xa5, 0x4b, 0x49, 0x6e,
	0x44, 0x32, 0x31, 0x8d, 0x5a, 0x77, 0xf3, 0xbc, 0xe7, 0x3c, 0xf3, 0x77, 0x60, 0x94, 0x6a, 0xf5,
	0x2c, 0x8d, 0x55, 0x98, 0xf9, 0x0f, 0x42, 0x69, 0x85, 0x53, 0xb9, 0x14, 0x91, 0x9d, 0x2b, 0x1d,
	0xc6, 0x93, 0xc4, 0xc4, 0x18, 0xd3, 0x83, 0xa6, 0x67, 0xee, 0x9a, 0xe6, 0x0a, 0x27, 0x1b, 0xde,
	0xe8, 0xb5, 0x0d, 0xde, 0x59, 0xe9, 0x5e, 0xe8, 0x30, 0xa6, 0xbb, 0x30, 0x28, 0x37, 0xba, 0x12,
	0x91, 0x64, 0x64, 0x48, 0xc6, 0xde, 0x6c, 0xcd, 0x74, 0x0f, 0xbc, 0x72, 0x7d, 0x29, 0x16, 0xf2,
	0x89, 0xb5, 0x5d, 0xb1, 0x09, 0x6a, 0xf3, 0x54, 0xa0, 0x64, 0xff, 0x1a, 0xb3, 0x64, 0xca, 0xa0,
	0xef, 0x1b, 0x19, 0x28, 0xb4, 0xac, 0x33, 0x24, 0xe3, 0xce, 0xac, 0x46, 0xba, 0x0d, 0xdd, 0x48,
	0x98, 0x47, 0xcb, 0xba, 0x2e, 0xaf, 0x80, 0x72, 0x00, 0x3f, 0x4e, 0x8d, 0x95, 0x77, 0x52, 0x18,
	0xd6, 0x73, 0xa5, 0x6f, 0x09, 0xdd, 0x81, 0x9e, 0x45, 0x81, 0xa9, 0x65, 0xfd, 0x21, 0x19, 0x0f,
	0x66, 0x5f, 0x44, 0x0f, 0x61, 0x4b, 0x20, 0x4a, 0x1d, 0x08, 0xed, 0x57, 0xee, 0xc0, 0xb9, 0xbf,
	0xd2, 0xfa, 0xae, 0xb7, 0x59, 0x22, 0x99, 0xe7, 0x3a, 0xd6, 0x4c, 0xf7, 0xe1, 0x7f, 0x75, 0xd2,
	0x75, 0x78, 0x83, 0x69, 0x90, 0x31, 0x70, 0x8f, 0xf9, 0x19, 0x9e, 0x9c, 0xbf, 0xe5, 0x9c, 0xac,
	0x72, 0x4e, 0x3e, 0x72, 0x4e, 0x5e, 0x0a, 0xde, 0x5a, 0x15, 0xbc, 0xf5, 0x5e, 0xf0, 0xd6, 0xfd,
	0xd1, 0x1f, 0xdf, 0x3e, 0x5d, 0x4e, 0x37, 0x07, 0x86, 0x59, 0x22, 0xed, 0xa2, 0xe7, 0x86, 0x75,
	0xfc, 0x19, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x64, 0xff, 0x81, 0xd2, 0x01, 0x00, 0x00,
}

func (m *ExamsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExamsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExamsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CourseOfStudy) > 0 {
		i -= len(m.CourseOfStudy)
		copy(dAtA[i:], m.CourseOfStudy)
		i = encodeVarintExamsInfo(dAtA, i, uint64(len(m.CourseOfStudy)))
		i--
		dAtA[i] = 0x52
	}
	if m.ExamType != 0 {
		i = encodeVarintExamsInfo(dAtA, i, uint64(m.ExamType))
		i--
		dAtA[i] = 0x48
	}
	if m.AttendanceYear != 0 {
		i = encodeVarintExamsInfo(dAtA, i, uint64(m.AttendanceYear))
		i--
		dAtA[i] = 0x40
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CourseYear != 0 {
		i = encodeVarintExamsInfo(dAtA, i, uint64(m.CourseYear))
		i--
		dAtA[i] = 0x30
	}
	if m.Marks != 0 {
		i = encodeVarintExamsInfo(dAtA, i, uint64(m.Marks))
		i--
		dAtA[i] = 0x28
	}
	if m.Credits != 0 {
		i = encodeVarintExamsInfo(dAtA, i, uint64(m.Credits))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ExamDate) > 0 {
		i -= len(m.ExamDate)
		copy(dAtA[i:], m.ExamDate)
		i = encodeVarintExamsInfo(dAtA, i, uint64(len(m.ExamDate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExamLabel) > 0 {
		i -= len(m.ExamLabel)
		copy(dAtA[i:], m.ExamLabel)
		i = encodeVarintExamsInfo(dAtA, i, uint64(len(m.ExamLabel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExamName) > 0 {
		i -= len(m.ExamName)
		copy(dAtA[i:], m.ExamName)
		i = encodeVarintExamsInfo(dAtA, i, uint64(len(m.ExamName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExamsInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovExamsInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExamsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExamName)
	if l > 0 {
		n += 1 + l + sovExamsInfo(uint64(l))
	}
	l = len(m.ExamLabel)
	if l > 0 {
		n += 1 + l + sovExamsInfo(uint64(l))
	}
	l = len(m.ExamDate)
	if l > 0 {
		n += 1 + l + sovExamsInfo(uint64(l))
	}
	if m.Credits != 0 {
		n += 1 + sovExamsInfo(uint64(m.Credits))
	}
	if m.Marks != 0 {
		n += 1 + sovExamsInfo(uint64(m.Marks))
	}
	if m.CourseYear != 0 {
		n += 1 + sovExamsInfo(uint64(m.CourseYear))
	}
	if m.Status {
		n += 2
	}
	if m.AttendanceYear != 0 {
		n += 1 + sovExamsInfo(uint64(m.AttendanceYear))
	}
	if m.ExamType != 0 {
		n += 1 + sovExamsInfo(uint64(m.ExamType))
	}
	l = len(m.CourseOfStudy)
	if l > 0 {
		n += 1 + l + sovExamsInfo(uint64(l))
	}
	return n
}

func sovExamsInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExamsInfo(x uint64) (n int) {
	return sovExamsInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExamsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExamsInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExamsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExamsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExamsInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExamsInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExamsInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExamsInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExamLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExamsInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExamsInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExamDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			m.Credits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marks", wireType)
			}
			m.Marks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Marks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseYear", wireType)
			}
			m.CourseYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CourseYear |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttendanceYear", wireType)
			}
			m.AttendanceYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttendanceYear |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamType", wireType)
			}
			m.ExamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExamType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseOfStudy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExamsInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExamsInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseOfStudy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExamsInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExamsInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExamsInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExamsInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExamsInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExamsInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExamsInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExamsInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExamsInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExamsInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExamsInfo = fmt.Errorf("proto: unexpected end of group")
)
