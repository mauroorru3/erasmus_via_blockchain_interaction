// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: universitychainit/transcript_of_records.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TranscriptOfRecords struct {
	ExamsData       string `protobuf:"bytes,1,opt,name=examsData,proto3" json:"examsData,omitempty"`
	TotalExams      uint32 `protobuf:"varint,2,opt,name=totalExams,proto3" json:"totalExams,omitempty"`
	ExamsPassed     uint32 `protobuf:"varint,3,opt,name=examsPassed,proto3" json:"examsPassed,omitempty"`
	TotalCredits    uint32 `protobuf:"varint,4,opt,name=totalCredits,proto3" json:"totalCredits,omitempty"`
	AchievedCredits uint32 `protobuf:"varint,5,opt,name=achievedCredits,proto3" json:"achievedCredits,omitempty"`
}

func (m *TranscriptOfRecords) Reset()         { *m = TranscriptOfRecords{} }
func (m *TranscriptOfRecords) String() string { return proto.CompactTextString(m) }
func (*TranscriptOfRecords) ProtoMessage()    {}
func (*TranscriptOfRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2a811304e2eae7, []int{0}
}
func (m *TranscriptOfRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TranscriptOfRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TranscriptOfRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TranscriptOfRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranscriptOfRecords.Merge(m, src)
}
func (m *TranscriptOfRecords) XXX_Size() int {
	return m.Size()
}
func (m *TranscriptOfRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_TranscriptOfRecords.DiscardUnknown(m)
}

var xxx_messageInfo_TranscriptOfRecords proto.InternalMessageInfo

func (m *TranscriptOfRecords) GetExamsData() string {
	if m != nil {
		return m.ExamsData
	}
	return ""
}

func (m *TranscriptOfRecords) GetTotalExams() uint32 {
	if m != nil {
		return m.TotalExams
	}
	return 0
}

func (m *TranscriptOfRecords) GetExamsPassed() uint32 {
	if m != nil {
		return m.ExamsPassed
	}
	return 0
}

func (m *TranscriptOfRecords) GetTotalCredits() uint32 {
	if m != nil {
		return m.TotalCredits
	}
	return 0
}

func (m *TranscriptOfRecords) GetAchievedCredits() uint32 {
	if m != nil {
		return m.AchievedCredits
	}
	return 0
}

func init() {
	proto.RegisterType((*TranscriptOfRecords)(nil), "university_chain_it.universitychainit.TranscriptOfRecords")
}

func init() {
	proto.RegisterFile("universitychainit/transcript_of_records.proto", fileDescriptor_3a2a811304e2eae7)
}

var fileDescriptor_3a2a811304e2eae7 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2d, 0xcd, 0xcb, 0x2c,
	0x4b, 0x2d, 0x2a, 0xce, 0x2c, 0xa9, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xcb, 0x2c, 0xd1, 0x2f, 0x29,
	0x4a, 0xcc, 0x2b, 0x4e, 0x2e, 0xca, 0x2c, 0x28, 0x89, 0xcf, 0x4f, 0x8b, 0x2f, 0x4a, 0x4d, 0xce,
	0x2f, 0x4a, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x45, 0x28, 0x8f, 0x07, 0xab,
	0x8f, 0xcf, 0x2c, 0xd1, 0xc3, 0x30, 0x42, 0xe9, 0x30, 0x23, 0x97, 0x70, 0x08, 0xdc, 0x18, 0xff,
	0xb4, 0x20, 0x88, 0x21, 0x42, 0x32, 0x5c, 0x9c, 0xa9, 0x15, 0x89, 0xb9, 0xc5, 0x2e, 0x89, 0x25,
	0x89, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x08, 0x01, 0x21, 0x39, 0x2e, 0xae, 0x92, 0xfc,
	0x92, 0xc4, 0x1c, 0x57, 0x90, 0x88, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6f, 0x10, 0x92, 0x88, 0x90,
	0x02, 0x17, 0x37, 0x58, 0x71, 0x40, 0x62, 0x71, 0x71, 0x6a, 0x8a, 0x04, 0x33, 0x58, 0x01, 0xb2,
	0x90, 0x90, 0x12, 0x17, 0x0f, 0x58, 0xbd, 0x73, 0x51, 0x6a, 0x4a, 0x66, 0x49, 0xb1, 0x04, 0x0b,
	0x58, 0x09, 0x8a, 0x98, 0x90, 0x06, 0x17, 0x7f, 0x62, 0x72, 0x46, 0x66, 0x6a, 0x59, 0x6a, 0x0a,
	0x4c, 0x19, 0x2b, 0x58, 0x19, 0xba, 0xb0, 0x93, 0xfb, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e,
	0xcb, 0x31, 0x44, 0xe9, 0x62, 0x09, 0x06, 0xfd, 0x0a, 0x7d, 0x2c, 0x61, 0x59, 0x59, 0x90, 0x5a,
	0x9c, 0xc4, 0x06, 0x0e, 0x3c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x39, 0x9e, 0x14, 0x79,
	0x6d, 0x01, 0x00, 0x00,
}

func (m *TranscriptOfRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TranscriptOfRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TranscriptOfRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AchievedCredits != 0 {
		i = encodeVarintTranscriptOfRecords(dAtA, i, uint64(m.AchievedCredits))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalCredits != 0 {
		i = encodeVarintTranscriptOfRecords(dAtA, i, uint64(m.TotalCredits))
		i--
		dAtA[i] = 0x20
	}
	if m.ExamsPassed != 0 {
		i = encodeVarintTranscriptOfRecords(dAtA, i, uint64(m.ExamsPassed))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalExams != 0 {
		i = encodeVarintTranscriptOfRecords(dAtA, i, uint64(m.TotalExams))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ExamsData) > 0 {
		i -= len(m.ExamsData)
		copy(dAtA[i:], m.ExamsData)
		i = encodeVarintTranscriptOfRecords(dAtA, i, uint64(len(m.ExamsData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTranscriptOfRecords(dAtA []byte, offset int, v uint64) int {
	offset -= sovTranscriptOfRecords(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TranscriptOfRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExamsData)
	if l > 0 {
		n += 1 + l + sovTranscriptOfRecords(uint64(l))
	}
	if m.TotalExams != 0 {
		n += 1 + sovTranscriptOfRecords(uint64(m.TotalExams))
	}
	if m.ExamsPassed != 0 {
		n += 1 + sovTranscriptOfRecords(uint64(m.ExamsPassed))
	}
	if m.TotalCredits != 0 {
		n += 1 + sovTranscriptOfRecords(uint64(m.TotalCredits))
	}
	if m.AchievedCredits != 0 {
		n += 1 + sovTranscriptOfRecords(uint64(m.AchievedCredits))
	}
	return n
}

func sovTranscriptOfRecords(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTranscriptOfRecords(x uint64) (n int) {
	return sovTranscriptOfRecords(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TranscriptOfRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTranscriptOfRecords
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TranscriptOfRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TranscriptOfRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamsData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscriptOfRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTranscriptOfRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTranscriptOfRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExamsData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalExams", wireType)
			}
			m.TotalExams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscriptOfRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalExams |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamsPassed", wireType)
			}
			m.ExamsPassed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscriptOfRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExamsPassed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCredits", wireType)
			}
			m.TotalCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscriptOfRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCredits |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievedCredits", wireType)
			}
			m.AchievedCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscriptOfRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievedCredits |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTranscriptOfRecords(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTranscriptOfRecords
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTranscriptOfRecords(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTranscriptOfRecords
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTranscriptOfRecords
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTranscriptOfRecords
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTranscriptOfRecords
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTranscriptOfRecords
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTranscriptOfRecords
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTranscriptOfRecords        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTranscriptOfRecords          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTranscriptOfRecords = fmt.Errorf("proto: unexpected end of group")
)
